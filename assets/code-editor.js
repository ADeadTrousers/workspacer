// Generated by Haxe 3.4.4
(function ($hx_exports, $global) { "use strict";
var $hxClasses = {};
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var org_tamina_html_component_HTMLComponent = function() {
	this._skinPartsAttached = false;
};
$hxClasses["org.tamina.html.component.HTMLComponent"] = org_tamina_html_component_HTMLComponent;
org_tamina_html_component_HTMLComponent.__name__ = ["org","tamina","html","component","HTMLComponent"];
org_tamina_html_component_HTMLComponent.__super__ = HTMLHtmlElement;
org_tamina_html_component_HTMLComponent.prototype = $extend(HTMLHtmlElement.prototype,{
	createdCallback: function() {
		this.initDefaultValues();
		this.parseContent();
		this.initContent();
		this.displayContent();
		this.updateSkinPartsStatus();
		this.created = true;
		if(this._skinPartsAttached) {
			this.creationCompleteCallback();
		}
	}
	,creationCompleteCallback: function() {
		this.creationComplete = true;
		this.dispatchEvent(org_tamina_html_component_HTMLComponentEventFactory.createEvent("creationComplete",false));
	}
	,attachedCallback: function() {
		if(!this.initialized) {
			this.dispatchEvent(org_tamina_html_component_HTMLComponentEventFactory.createEvent("initialize",false));
		}
		this.initialized = true;
	}
	,detachedCallback: function() {
	}
	,attributeChangedCallback: function(attrName,oldVal,newVal) {
	}
	,initDefaultValues: function() {
		this._visible = true;
		this._useExternalContent = false;
		this._defaultDisplayStyle = "";
	}
	,get_visible: function() {
		return this._visible;
	}
	,set_visible: function(value) {
		this._visible = value;
		if(this._defaultDisplayStyle == "" || this._defaultDisplayStyle == "none" || this._defaultDisplayStyle == null) {
			this._defaultDisplayStyle = this.style.display;
			if(this._defaultDisplayStyle == "" || this._defaultDisplayStyle == "none") {
				this._defaultDisplayStyle = "block";
			}
		}
		if(this._visible) {
			this.style.display = this._defaultDisplayStyle;
		} else {
			this.style.display = "none";
		}
		return this._visible;
	}
	,getContent: function() {
		return this.getView();
	}
	,parseContent: function(useExternalContent) {
		if(useExternalContent == null) {
			useExternalContent = true;
		}
		var content = "";
		if(this.childElementCount == 0 || !useExternalContent) {
			content = this.translateContent(this.getContent());
			this._tempElement = window.document.createElement("div");
		} else {
			this._useExternalContent = true;
			this._tempElement = this;
			content = this.translateContent(this.innerHTML);
		}
		this._tempElement.innerHTML = content;
		var children = this._tempElement.getElementsByTagName("*");
		var _g = 0;
		while(_g < children.length) {
			var child = children[_g];
			++_g;
			if(!Object.prototype.hasOwnProperty.call(child,"host")) {
				child["host"] = this;
			}
		}
		this.initSkinParts(this._tempElement);
	}
	,initSkinParts: function(target) {
		var c = js_Boot.getClass(this);
		this._skinParts = [];
		while(c != org_tamina_html_component_HTMLComponent && c != null) {
			var meta = haxe_rtti_Meta.getFields(c);
			var metaFields = Reflect.fields(meta);
			var _g1 = 0;
			var _g = metaFields.length;
			while(_g1 < _g) {
				var i = _g1++;
				var field = Reflect.field(meta,metaFields[i]);
				if(Object.prototype.hasOwnProperty.call(field,"skinpart")) {
					var element = org_tamina_utils_HTMLUtils.getElementByAttribute(target,"data-id",metaFields[i]);
					this[metaFields[i]] = element;
					if(element == null) {
						console.log("skinpart is null: " + metaFields[i] + " from " + this.nodeName);
					}
					this._skinParts.push(element);
				}
			}
			c = Type.getSuperClass(c);
		}
	}
	,updateSkinPartsStatus: function() {
		this._skinPartsWaiting = [];
		var _g = 0;
		var _g1 = this._skinParts;
		while(_g < _g1.length) {
			var skinPart = _g1[_g];
			++_g;
			if(org_tamina_html_component_HTMLApplication.isCustomElement(skinPart.nodeName) && skinPart.initialized != true) {
				this._skinPartsWaiting.push(skinPart);
			}
		}
		this._skinPartsAttached = this._skinPartsWaiting.length == 0;
		if(!this._skinPartsAttached) {
			var _g2 = 0;
			var _g11 = this._skinPartsWaiting;
			while(_g2 < _g11.length) {
				var skinPart1 = _g11[_g2];
				++_g2;
				skinPart1.addEventListener("initialize",(function(a1,f) {
					return function() {
						f[0](a1[0]);
					};
				})([skinPart1],[$bind(this,this.skinPartReadyHandler)]));
			}
		}
	}
	,skinPartReadyHandler: function(skinPart) {
		HxOverrides.remove(this._skinPartsWaiting,skinPart);
		this._skinPartsAttached = this._skinPartsWaiting.length == 0;
		if(!this.creationComplete && this._skinPartsAttached) {
			this.creationCompleteCallback();
		}
	}
	,translateContent: function(source) {
		var content = source;
		var stringToTranslate = new RegExp("\\{\\{(?!\\}\\})(.+)\\}\\}","gim");
		var results = [];
		var result = [];
		var i = 0;
		while(true) {
			result = stringToTranslate.exec(content);
			if(!(result != null)) {
				break;
			}
			results[i] = result;
			++i;
		}
		result = [];
		var _g = 0;
		while(_g < results.length) {
			var result1 = results[_g];
			++_g;
			var totalString = result1[0];
			var key = StringTools.trim(result1[1]);
			content = StringTools.replace(content,totalString,org_tamina_i18n_LocalizationManager.get_instance().getString(key));
		}
		return content;
	}
	,initContent: function() {
	}
	,displayContent: function() {
		var numChildren = this._tempElement.children.length;
		if(!this._useExternalContent) {
			while(numChildren > 0) {
				--numChildren;
				var item = this._tempElement.children.item(0);
				this.appendChild(item);
			}
		}
	}
	,__class__: org_tamina_html_component_HTMLComponent
});
var org_tamina_html_component_HTMLApplication = function() {
};
$hxClasses["org.tamina.html.component.HTMLApplication"] = org_tamina_html_component_HTMLApplication;
org_tamina_html_component_HTMLApplication.__name__ = ["org","tamina","html","component","HTMLApplication"];
org_tamina_html_component_HTMLApplication.get_componentsXTagList = function() {
	if(org_tamina_html_component_HTMLApplication.componentsXTagList == null) {
		org_tamina_html_component_HTMLApplication.componentsXTagList = new haxe_ds_StringMap();
	}
	return org_tamina_html_component_HTMLApplication.componentsXTagList;
};
org_tamina_html_component_HTMLApplication.createInstance = function(type) {
	var className = Type.getClassName(type);
	var tag = org_tamina_html_component_HTMLApplication.getTagByClassName(className);
	return window.document.createElement(tag);
};
org_tamina_html_component_HTMLApplication.isCustomElement = function(nodeName) {
	var this1 = org_tamina_html_component_HTMLApplication.get_componentsXTagList();
	var key = nodeName.toLowerCase();
	var _this = this1;
	if(__map_reserved[key] != null) {
		return _this.existsReserved(key);
	} else {
		return _this.h.hasOwnProperty(key);
	}
};
org_tamina_html_component_HTMLApplication.getTagByClassName = function(className) {
	var result = "";
	var tag = org_tamina_html_component_HTMLApplication.get_componentsXTagList().keys();
	while(tag.hasNext()) {
		var tag1 = tag.next();
		var _this = org_tamina_html_component_HTMLApplication.get_componentsXTagList();
		var value = __map_reserved[tag1] != null ? _this.getReserved(tag1) : _this.h[tag1];
		if(value == className) {
			result = tag1;
			break;
		}
	}
	return result;
};
org_tamina_html_component_HTMLApplication.prototype = {
	loadComponents: function() {
		var tag = org_tamina_html_component_HTMLApplication.get_componentsXTagList().keys();
		while(tag.hasNext()) {
			var tag1 = tag.next();
			var _this = org_tamina_html_component_HTMLApplication.get_componentsXTagList();
			var componentClass = Type.resolveClass(__map_reserved[tag1] != null ? _this.getReserved(tag1) : _this.h[tag1]);
			window.document.registerElement(tag1,componentClass);
		}
	}
	,__class__: org_tamina_html_component_HTMLApplication
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var CodeEditor = $hx_exports["CodeEditor"] = function(settings) {
	this.regexp_ins_tab = new EReg("\n(?!\n)","g");
	this.settings = { font_family : "8.4pt Monaco", font_size : "8.4pt", line_height : "138%", indentation_width : 4, indentation_method : "spaces"};
	this.line_beginnings = [];
	this.highlighter = null;
	this.redo_stack = new Stack();
	this.undo_stack = new Stack();
	this.timeout = new Timeout();
	this.edit_area = window.document.createElement("pre");
	this.line_numbers = window.document.createElement("pre");
	this.editor = window.document.createElement("div");
	this.y_margin = 2;
	this.x_margin = 3;
	var _gthis = this;
	org_tamina_html_component_HTMLComponent.call(this);
	var value;
	var _g = 0;
	var _g1 = Reflect.fields(this.settings);
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		if(Object.prototype.hasOwnProperty.call(settings,name)) {
			value = Reflect.field(settings,name);
			if(value != null) {
				this.settings[name] = value;
			}
		}
	}
	this.line_numbers.className = "line-numbers";
	this.line_numbers.style.fontFamily = this.settings.font_family + ", monospace";
	this.line_numbers.style.fontSize = this.settings.font_size;
	this.line_numbers.style.lineHeight = this.settings.line_height;
	this.line_numbers.addEventListener("mousedown",function(event) {
		event.preventDefault();
		_gthis.edit_area.focus();
	});
	this.edit_area.className = "edit-area";
	this.edit_area.setAttribute("contenteditable","true");
	this.edit_area.onscroll = function(event1) {
		_gthis.line_numbers.style.top = -_gthis.edit_area.scrollTop + "px";
	};
	this.edit_area.addEventListener("mousedown",$bind(this,this.edit_area_onmousedown));
	this.edit_area.addEventListener("keydown",$bind(this,this.edit_area_onkeydown));
	this.edit_area.addEventListener("keypress",$bind(this,this.edit_area_onkeypress));
	this.edit_area.addEventListener("keyup",$bind(this,this.edit_area_onkeyup));
	this.edit_area.addEventListener("cut",$bind(this,this.edit_area_oncut));
	this.edit_area.addEventListener("paste",$bind(this,this.edit_area_onpaste));
	this.edit_area.style.fontFamily = this.settings.font_family + ", monospace";
	this.edit_area.style.fontSize = this.settings.font_size;
	this.edit_area.style.lineHeight = this.settings.line_height;
	this.edit_area.style.tabSize = settings.indentation_width;
	this.edit_area.style.MozTabSize = settings.indentation_width;
	this.edit_area.style.WebkitTabSize = settings.indentation_width;
	this.edit_area.style.MsTabSize = settings.indentation_width;
	this.editor.setAttribute("class","ps-code-editor");
	this.editor.setAttribute("tabindex","0");
	this.editor.setAttribute("spellcheck","false");
	this.editor.appendChild(CodeEditor.highlighter_styles);
	this.editor.appendChild(this.line_numbers);
	this.editor.appendChild(this.edit_area);
	this.menu = new ContextMenu(this);
	this.menu.addItem("undo","Undo");
	this.menu.addItem("redo","Redo");
	this.menu.addItem("cut","Cut");
	this.menu.addItem("copy","Copy");
	this.menu.addItem("delete","Delete");
	this.menu.addItem("selectAll","Select all");
	this.editor.appendChild(this.menu._ELEM_);
	this.menu._ELEM_.addEventListener("menu_action",$bind(this,this.editor_onmenuaction));
	this.editor.addEventListener("keydown",$bind(this,this.editor_onkeydown));
	this.editor.addEventListener("contextmenu",$bind(this,this.editor_oncontextmenu));
};
$hxClasses["CodeEditor"] = CodeEditor;
CodeEditor.__name__ = ["CodeEditor"];
CodeEditor.main = function() {
};
CodeEditor.addHighlighter = function(abbrev,highlighter) {
	var _this = CodeEditor.highlighters;
	if(__map_reserved[abbrev] != null) {
		_this.setReserved(abbrev,highlighter);
	} else {
		_this.h[abbrev] = highlighter;
	}
};
CodeEditor.__super__ = org_tamina_html_component_HTMLComponent;
CodeEditor.prototype = $extend(org_tamina_html_component_HTMLComponent.prototype,{
	editor_onkeydown: function(event) {
		if(event.keyCode == 27 && this.menu.get_visible()) {
			event.stopPropagation();
			this.menu.set_visible(false);
		}
	}
	,editor_oncontextmenu: function(event) {
		event.preventDefault();
		if(this.menu.get_visible()) {
			if(event.button == 2) {
				this.menu.set_visible(false);
			}
		} else {
			var items_enabled = [];
			if(this.undo_stack.get_hasItems()) {
				this.menu.setItemLabel("undo","Undo " + this.undo_stack.getLastItem().title);
				items_enabled.push("undo");
			} else {
				this.menu.setItemLabel("undo","Undo");
			}
			if(this.redo_stack.get_hasItems()) {
				this.menu.setItemLabel("redo","Redo " + this.redo_stack.getLastItem().title);
				items_enabled.push("redo");
			} else {
				this.menu.setItemLabel("redo","Redo");
			}
			var selection = window.getSelection();
			if(!selection.isCollapsed) {
				items_enabled.push("cut");
				items_enabled.push("copy");
				items_enabled.push("delete");
			}
			items_enabled.push("selectAll");
			this.menu.setEnabledItems(items_enabled);
			if(event.buttons != 0) {
				if(event.clientY + this.menu.get_height() > window.innerHeight) {
					this.menu.set_top(event.clientY - this.menu.get_height() - 2);
				} else {
					this.menu.set_top(event.clientY + 2);
				}
				if(event.clientX + this.menu.get_width() > window.innerWidth) {
					this.menu.set_left(event.clientX - this.menu.get_width() - 2);
				} else {
					this.menu.set_left(event.clientX + 2);
				}
			}
			this.menu.set_visible(true);
		}
	}
	,editor_onmenuaction: function(event) {
		var _g = event.detail.action;
		switch(_g) {
		case "copy":
			window.document.execCommand("copy");
			break;
		case "cut":
			window.document.execCommand("cut");
			break;
		case "delete":
			window.setTimeout($bind(this,this.deleteSelection),0);
			break;
		case "paste":
			this.edit_area.focus();
			window.document.execCommand("paste");
			break;
		case "redo":
			window.setTimeout($bind(this,this.redo),0);
			break;
		case "selectAll":
			window.setTimeout($bind(this,this.selectAll),0);
			break;
		case "undo":
			this.edit_area.focus();
			window.setTimeout($bind(this,this.undo),0);
			break;
		}
	}
	,edit_area_onmousedown: function(event) {
		if(this.menu._ELEM_.style.visibility == "visible") {
			event.preventDefault();
			if(event.buttons == 1) {
				event.stopPropagation();
				this.menu._ELEM_.style.visibility = "hidden";
			}
			this.edit_area.focus();
		}
		this.timeout.clear();
	}
	,edit_area_onkeydown: function(event) {
		var sel = window.getSelection();
		var key = event.keyCode;
		if(event.metaKey || event.ctrlKey) {
			if(event.key == "s") {
				event.preventDefault();
				event.stopPropagation();
				this.editor.dispatchEvent(new CustomEvent("save",{ detail : { text : this.getText()}}));
			} else if(event.key == "y") {
				event.preventDefault();
				this.redo();
			} else if(event.key == "z") {
				event.preventDefault();
				this.undo();
			}
			return;
		}
		if(key == 8) {
			event.preventDefault();
			if(sel.isCollapsed == true) {
				CumulativeDelete.create(this);
				this.timeout.start();
			} else {
				Delete.create(this);
				this.timeout.clear();
			}
		} else if(key == 9) {
			event.preventDefault();
			if(this.settings.indentation_method == "spaces") {
				var current_range = sel.getRangeAt(sel.rangeCount - 1);
				var range_before_selection = window.document.createRange();
				range_before_selection.setStart(this.edit_area,0);
				range_before_selection.setEnd(current_range.startContainer,current_range.startOffset);
				var string = range_before_selection.toString();
				var last_newline = string.lastIndexOf(Def.EOL);
				if(last_newline != -1) {
					string = HxOverrides.substr(string,last_newline + 1,null);
				}
				var ind_width = this.settings.indentation_width;
				var count = 0;
				var _g1 = 0;
				var _g = string.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(string.charAt(i) == "\t") {
						count = count + ind_width - count % ind_width;
					} else {
						++count;
					}
				}
				var spaces = "";
				var _g11 = 0;
				var _g2 = ind_width - count % ind_width;
				while(_g11 < _g2) {
					var i1 = _g11++;
					spaces += " ";
				}
				Insert.create(this,spaces);
			} else {
				Insert.create(this,"\t");
			}
		} else if(key == 13) {
			event.preventDefault();
			Insert.create(this,Def.EOL);
		} else if(key == 46) {
			event.preventDefault();
			CumulativeForwardDelete.create(this);
			this.timeout.start();
		}
	}
	,edit_area_onkeypress: function(event) {
		var key = event.key;
		if(key.length > 1) {
			return;
		}
		var sel = window.getSelection();
		if(event.metaKey || event.ctrlKey) {
			if(key == "," || key == "<") {
				event.preventDefault();
			} else if(key == "." || event.key == ">") {
				event.preventDefault();
			} else if(key.toLowerCase() == "a") {
				event.preventDefault();
				this.selectAll();
			}
			return;
		}
		if(event.charCode < 32) {
			return;
		}
		if(sel.isCollapsed) {
			CumulativeInsert.create(this,key);
			this.timeout.start();
		} else {
			Insert.create(this,key);
			this.timeout.clear();
		}
		event.preventDefault();
	}
	,edit_area_onkeyup: function(event) {
		var key = event.keyCode;
		if(key >= 33 && key <= 40) {
			event.stopPropagation();
			this.timeout.clear();
		}
	}
	,edit_area_oncut: function(event) {
		event.preventDefault();
		var sel = window.getSelection();
		if(!sel.isCollapsed) {
			window.document.execCommand("copy");
			Delete.create(this,"cut");
		}
	}
	,edit_area_onpaste: function(event) {
		event.preventDefault();
		var new_text = event.clipboardData.getData("text");
		if(new_text.length > 0) {
			Insert.create(this,new_text,"paste");
		}
	}
	,menu_onmousedown: function(event) {
		(js_Boot.__cast(event.target , HTMLElement)).style.visibility = "hidden";
		this.edit_area.focus();
	}
	,menu_onkeydown: function(event) {
		event.preventDefault();
		var key_code = event.keyCode;
		if(key_code == 27) {
			this.edit_area.focus();
			(js_Boot.__cast(event.target , HTMLElement)).style.visibility = "hidden";
			return;
		}
		if(key_code != 38 && key_code != 40) {
			return;
		}
		var button = event.target.querySelector("button:focus");
		var button_index = button != null ? this.menu_items_enabled.indexOf(button) : null;
		if(key_code == 38) {
			if(button != null && this.menu_items_enabled.length > 1) {
				if(button_index == 0) {
					button_index = this.menu_items_enabled.length;
				}
			} else {
				button_index = this.menu_items_enabled.length;
			}
			this.menu_items_enabled[button_index - 1].focus();
		} else if(key_code == 40) {
			if(js_Boot.__cast(button , Bool) && this.menu_items_enabled.length > 1) {
				if(button_index == this.menu_items_enabled.length - 1) {
					button_index = -1;
				}
			} else {
				button_index = -1;
			}
			this.menu_items_enabled[button_index + 1].focus();
		}
	}
	,menu_onfocusout: function(event) {
		event.target.style.visibility = "hidden";
		event.preventDefault();
	}
	,getRect: function() {
		return this.editor.getBoundingClientRect();
	}
	,createElementWithClass: function(type,class_name) {
		var element = window.document.createElement(type);
		element.className = class_name;
		return element;
	}
	,trigger: function(element,event_name,params) {
		element.dispatchEvent(new CustomEvent(event_name,params ? params : null));
	}
	,getCurrentSelectionRange: function() {
		var sel = window.getSelection();
		if(sel.rangeCount > 0) {
			return sel.getRangeAt(sel.rangeCount - 1);
		} else {
			return null;
		}
	}
	,setFilename: function(filename) {
		this.filename = filename;
		this.highlighter = null;
		if(filename != null) {
			var dot_pos = filename.lastIndexOf(".");
			if(dot_pos != -1) {
				var ext = HxOverrides.substr(filename,dot_pos + 1,null);
				var _this = CodeEditor.highlighters;
				if((__map_reserved[ext] != null ? _this.getReserved(ext) : _this.h[ext]) != null) {
					var _this1 = CodeEditor.highlighters;
					this.highlighter = __map_reserved[ext] != null ? _this1.getReserved(ext) : _this1.h[ext];
					CodeEditor.highlighter_styles.textContent = this.highlighter.stylesheet;
				}
			}
		}
	}
	,putFocus: function() {
		this.edit_area.focus();
	}
	,getText: function() {
		return this.edit_area.textContent;
	}
	,setText: function(text) {
		if(text == null || text.length == 0) {
			this.edit_area.innerHTML = "";
		} else {
			this.renderText(text);
		}
	}
	,renderText: function(text) {
		if(text == null) {
			text = this.getText();
		}
		var line_num_string = "1\n";
		if(text == null) {
			this.edit_area.innerHTML = "";
		} else {
			var line_num = 2;
			var index = null;
			var offset = 0;
			while(true) {
				index = text.indexOf("\n",offset);
				if(!(index != -1)) {
					break;
				}
				line_num_string += line_num + "\n";
				offset = index + 1;
				++line_num;
			}
			if(this.highlighter != null) {
				var new_content = this.highlighter.highlight(text);
				this.edit_area.innerHTML = "";
				if(new_content != null) {
					this.edit_area.appendChild(new_content);
				}
			} else {
				this.edit_area.textContent = text;
			}
		}
		this.edit_area.appendChild(window.document.createElement("br"));
		this.line_numbers.textContent = line_num_string;
	}
	,setEditorRender: function(selection) {
		window.setTimeout($bind(this,this.editorRender),0,selection);
	}
	,editorRender: function(selection) {
		this.renderText();
		this.setSelection(selection);
	}
	,createRange: function(start_node,start_offset,end_node,end_offset) {
		var range = window.document.createRange();
		range.setStart(start_node,start_offset);
		range.setEnd(end_node,end_offset);
		return range;
	}
	,createRangeFromCharPoints: function(points) {
		var range_start = this.findNodeByPos(points.start);
		var range_end = this.findNodeByPos(points.end);
		return this.createRange(range_start.node,range_start.offset,range_end.node,range_end.offset);
	}
	,findNodeByPos: function(pos) {
		var node = null;
		var last_node = null;
		var offset = 0;
		var found = false;
		var iterator = window.document.createNodeIterator(this.edit_area,4,null);
		while(true) {
			node = iterator.nextNode();
			if(!(node != null)) {
				break;
			}
			last_node = node;
			offset = pos;
			pos -= node.nodeValue.length;
			if(pos < 0) {
				found = true;
				break;
			}
		}
		if(!found) {
			node = this.edit_area;
			offset = this.edit_area.childNodes.length - 1;
		}
		return { node : node, offset : offset};
	}
	,getTextBetweenPoints: function(start_point,end_point) {
		var range = window.document.createRange();
		range.setStart(start_point.node,start_point.offset);
		range.setEnd(end_point.node,end_point.offset);
		return range.toString();
	}
	,getLineStartPoint: function(ref_node,ref_offset) {
		var pos = ref_node.nodeValue.substr(0,ref_offset).lastIndexOf(Def.EOL);
		if(pos > -1) {
			return { node : ref_node, offset : pos + 1};
		} else {
			var line_start = null;
			var _g = this.line_beginnings.length - 1;
			while(_g < 0) {
				var i = _g++;
				line_start = this.line_beginnings[i];
				if(ref_node.compareDocumentPosition(line_start.node) == 2) {
					break;
				}
			}
			return line_start;
		}
	}
	,getLineBeginnings: function() {
		var iterator = window.document.createNodeIterator(this.edit_area,4,null);
		var node;
		var offset;
		var text_content;
		var text_nodes = [];
		var line_beginnings = [];
		while(true) {
			node = iterator.nextNode();
			if(!(node != null)) {
				break;
			}
			text_nodes.push(node);
			text_content = node.nodeValue;
			offset = -1;
			while(true) {
				offset = text_content.indexOf(Def.EOL,offset + 1);
				if(!(offset != -1)) {
					break;
				}
				line_beginnings.push({ node : node, offset : offset});
			}
		}
		return { text_nodes : text_nodes, line_beginnings : line_beginnings};
	}
	,getTextNodes: function() {
		var iterator = window.document.createNodeIterator(this.edit_area,4,null);
		var text_nodes = [];
		var node;
		while(true) {
			node = iterator.nextNode();
			if(!(node != null)) {
				break;
			}
			text_nodes.push(node);
		}
	}
	,replaceText: function(position,length,new_text) {
		var where_start = this.findNodeByPos(position);
		var where_end = length > 0 ? this.findNodeByPos(position + length) : where_start;
		var range = this.createRange(where_start.node,where_start.offset,where_end.node,where_end.offset);
		range.deleteContents();
		if(new_text.length > 0) {
			range.insertNode(window.document.createTextNode(new_text));
		}
	}
	,undo: function() {
		if(this.undo_stack.get_hasItems()) {
			var last_item = this.undo_stack.pop();
			last_item.undo();
			this.redo_stack.push(last_item);
			this.timeout.clear();
		}
	}
	,redo: function() {
		if(this.redo_stack.get_hasItems()) {
			var last_item = this.redo_stack.pop();
			last_item.redo();
			this.undo_stack.push(last_item);
		}
	}
	,undoStackAdd: function(item) {
		this.undo_stack.push(item);
		this.redo_stack.clear();
	}
	,getCharPositionsFromRange: function(range) {
		var range_before = this.createRange(this.edit_area,0,range.startContainer,range.startOffset);
		var start_pos = range_before.toString().length;
		return { start : start_pos, end : start_pos + range.toString().length};
	}
	,getCharPosFromRangeStart: function(range) {
		var range_before = this.createRange(this.edit_area,0,range.startContainer,range.startOffset);
		return range_before.toString().length;
	}
	,setCaretPos: function(pos) {
		var where = this.findNodeByPos(pos);
		var sel = window.getSelection();
		sel.removeAllRanges();
		sel.addRange(this.createRange(where.node,where.offset,where.node,where.offset));
	}
	,setSelection: function(spans) {
		var sel = window.getSelection();
		sel.removeAllRanges();
		var _g1 = 0;
		var _g = spans.length;
		while(_g1 < _g) {
			var i = _g1++;
			var range = window.document.createRange();
			var where_start = this.findNodeByPos(spans[i].start);
			range.setStart(where_start.node,where_start.offset);
			if(spans[i].end) {
				var where_end = this.findNodeByPos(spans[i].end);
				range.setEnd(where_end.node,where_end.offset);
			} else {
				range.setEnd(where_start.node,where_start.offset);
			}
			sel.addRange(range);
			this.edit_area.focus();
		}
	}
	,getSelectionPoints: function() {
		var output = [];
		var sel = window.getSelection();
		var _g1 = 0;
		var _g = sel.rangeCount;
		while(_g1 < _g) {
			var i = _g1++;
			var range = sel.getRangeAt(i);
			output.push(this.getRangePoints(range));
		}
		return output;
	}
	,getRangePoints: function(range) {
		var range_before = window.document.createRange();
		range_before.setStart(this.edit_area,0);
		range_before.setEnd(range.startContainer,range.startOffset);
		var start = range_before.toString().length;
		return { start : start, end : start + range.toString().length};
	}
	,indentBlock: function() {
		this.getLineBeginnings();
		var sel = window.getSelection();
		var r0 = sel.getRangeAt(sel.rangeCount - 1);
		var sel_start_node = r0.startContainer;
		var sel_start_offset = r0.startOffset;
		var sel_end_node = r0.endContainer;
		var sel_end_offset = r0.endOffset;
		var sel_start_text_node_num = this.text_nodes.indexOf(sel_start_node);
		var sel_end_text_node_num = this.text_nodes.indexOf(sel_end_node);
		var current_text_node_num = sel_start_text_node_num;
		sel_end_text_node_num = sel_start_text_node_num;
		var numba = sel_end_text_node_num;
		var first_node_val = sel_start_node.nodeValue;
		if(sel.isCollapsed == true) {
			var _g = this.line_beginnings.length - 1;
			while(_g < 0) {
				var i = _g++;
				var line_start = this.line_beginnings[i];
				if(r0.comparePoint(line_start.node,line_start.offset) == 0) {
					if(line_start.node.nodeValue.charAt(line_start.offset + 1) != Def.EOL) {
						line_start.node.insertData(line_start.offset + 1,Def.TAB);
					}
				}
			}
		}
		var sli = first_node_val.substring(0,sel_start_offset);
		var pos = sli.lastIndexOf(Def.EOL);
		if(pos == -1) {
			while(true) {
				--current_text_node_num;
				var n = this.text_nodes[current_text_node_num];
				var v = n.nodeValue;
				var last_eol = v.lastIndexOf(Def.EOL);
				if(last_eol > -1) {
					n.insertData(last_eol + 1,Def.TAB);
					break;
				}
				if(!(current_text_node_num > 0)) {
					break;
				}
			}
		} else if(first_node_val.charAt(pos + 1) != Def.EOL) {
			sel_start_node.insertData(pos + 1,Def.TAB);
		}
	}
	,indent: function(text_val) {
		return text_val.replace(this.regexp_ins_tab,Def.EOL + Def.TAB);
	}
	,selectAll: function() {
		var selection = window.getSelection();
		var range = window.document.createRange();
		range.setStart(this.edit_area,0);
		range.setEnd(this.edit_area,this.edit_area.childNodes.length - 1);
		selection.removeAllRanges();
		selection.addRange(range);
		this.edit_area.focus();
	}
	,deleteSelection: function() {
		Delete.create(this);
	}
	,getView: function() {
		return "<pre class=\"line-numbers\"></pre>\n<pre class=\"edit-area\">Vemp.</pre>\n<section>blood goose</section>\n";
	}
	,__class__: CodeEditor
});
var ContextMenu = function(editor) {
	this.menu_items_enabled = [];
	this.menu_items = [];
	this._ELEM_ = window.document.createElement("menu");
	var _gthis = this;
	this.editor = editor;
	this._ELEM_.setAttribute("tabindex","0");
	this._ELEM_.onmousedown = function() {
		_gthis.set_visible(false);
	};
	this._ELEM_.onkeydown = function(event) {
		var key = event.keyCode;
		if(_gthis.menu_items_enabled.length == 0 || key != ContextMenu.KEY.UP_ARROW && key != ContextMenu.KEY.DOWN_ARROW) {
			return;
		}
		var current_button = _gthis._ELEM_.querySelector("button:focus");
		if(current_button == null) {
			if(key == ContextMenu.KEY.DOWN_ARROW) {
				_gthis.menu_items_enabled[0].focus();
			} else {
				_gthis.menu_items_enabled[_gthis.menu_items_enabled.length - 1].focus();
			}
		} else {
			var current_button_index = _gthis.menu_items_enabled.indexOf(current_button);
			if(key == ContextMenu.KEY.DOWN_ARROW) {
				_gthis.menu_items_enabled[(current_button_index + 1) % _gthis.menu_items_enabled.length].focus();
			} else {
				_gthis.menu_items_enabled[current_button_index > 0 ? current_button_index - 1 : _gthis.menu_items_enabled.length - 1].focus();
			}
		}
	};
};
$hxClasses["ContextMenu"] = ContextMenu;
ContextMenu.__name__ = ["ContextMenu"];
ContextMenu.prototype = {
	get_visible: function() {
		if(this._ELEM_.style.visibility == "visible") {
			return true;
		} else {
			return false;
		}
	}
	,set_visible: function(value) {
		if(value) {
			this._ELEM_.style.visibility = "visible";
			this._ELEM_.focus();
		} else {
			this._ELEM_.style.visibility = "hidden";
		}
		return value;
	}
	,get_rect: function() {
		return this._ELEM_.getBoundingClientRect();
	}
	,get_width: function() {
		return this._ELEM_.clientWidth;
	}
	,get_height: function() {
		return this._ELEM_.clientHeight;
	}
	,get_top: function() {
		return this._ELEM_.getBoundingClientRect().top;
	}
	,set_top: function(value) {
		var rect = this.editor.getRect();
		this._ELEM_.style.top = Std.string(value - rect.top) + "px";
		return value;
	}
	,get_left: function() {
		return this._ELEM_.getBoundingClientRect().left;
	}
	,set_left: function(value) {
		var rect = this.editor.getRect();
		this._ELEM_.style.left = Std.string(value - rect.left) + "px";
		return value;
	}
	,addItem: function(name,label) {
		var _gthis = this;
		var button = window.document.createElement("button");
		button.name = name;
		button.textContent = label;
		button.onmousemove = function(event) {
			var button1 = js_Boot.__cast(event.target , HTMLButtonElement);
			if(!button1.disabled) {
				button1.focus();
			}
		};
		button.onmouseout = function(event1) {
			var button2 = js_Boot.__cast(event1.target , HTMLButtonElement);
			_gthis._ELEM_.focus();
		};
		button.onmousedown = function(event2) {
			var button3 = js_Boot.__cast(event2.target , HTMLButtonElement);
			if(button3.disabled) {
				event2.stopPropagation();
			} else {
				button3.parentElement.dispatchEvent(new CustomEvent("menu_action",{ bubbles : true, detail : { action : button3.name}}));
			}
		};
		button.onkeydown = function(event3) {
			if(event3.keyCode == 13) {
				event3.target.dispatchEvent(new MouseEvent("mousedown",{ bubbles : true}));
			}
		};
		this._ELEM_.appendChild(button);
		this.menu_items.push(button);
	}
	,setItemLabel: function(name,label) {
		this._ELEM_.querySelector("button[name=\"" + name + "\"]").textContent = label;
	}
	,setEnabledItems: function(enabled_items) {
		this.menu_items_enabled = [];
		var _g = 0;
		var _g1 = this.menu_items;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			if(enabled_items.indexOf(button.name) != -1) {
				button.disabled = false;
				this.menu_items_enabled.push(button);
			} else {
				button.disabled = true;
			}
		}
	}
	,__class__: ContextMenu
};
var TextAction = function(editor,title) {
	this.editor = editor;
	this.title = title;
};
$hxClasses["TextAction"] = TextAction;
TextAction.__name__ = ["TextAction"];
TextAction.prototype = {
	getName: function() {
		return Type.getClassName(js_Boot.getClass(this));
	}
	,test: function(class_name) {
		return this.getName() == class_name;
	}
	,undo: function() {
	}
	,redo: function() {
	}
	,__class__: TextAction
};
var CumulativeDelete = function(editor,title) {
	this.removed_text = "";
	TextAction.call(this,editor,title != null ? title : "delete");
};
$hxClasses["CumulativeDelete"] = CumulativeDelete;
CumulativeDelete.__name__ = ["CumulativeDelete"];
CumulativeDelete.create = function(editor,title) {
	var sel = window.getSelection();
	if(sel.isCollapsed == false) {
		return false;
	}
	var current_range = editor.getCurrentSelectionRange();
	var range_before_selection = window.document.createRange();
	range_before_selection.setStart(editor.edit_area,0);
	range_before_selection.setEnd(current_range.startContainer,current_range.startOffset);
	var text_before_caret = range_before_selection.toString();
	var pos = text_before_caret.length;
	if(pos == 0) {
		return false;
	}
	var instance = null;
	if(!editor.timeout.hasExpired() && editor.undo_stack.get_hasItems()) {
		var last_item = editor.undo_stack.getLastItem();
		if(last_item.getName() == "CumulativeDelete") {
			instance = last_item;
		}
	}
	if(!instance) {
		instance = new CumulativeDelete(editor,title);
		editor.undoStackAdd(instance);
	}
	instance.position = pos - 1;
	instance.removed_text = HxOverrides.substr(text_before_caret,-1,null) + Std.string(instance.removed_text);
	window.document.execCommand("delete");
	editor.setEditorRender([{ start : instance.position, end : null}]);
	return true;
};
CumulativeDelete.__super__ = TextAction;
CumulativeDelete.prototype = $extend(TextAction.prototype,{
	undo: function() {
		this.editor.replaceText(this.position,0,this.removed_text);
		this.editor.setEditorRender([{ start : this.position + this.removed_text.length, end : null}]);
	}
	,redo: function() {
		this.editor.replaceText(this.position,this.removed_text.length,"");
		this.editor.setEditorRender([{ start : this.position, end : null}]);
	}
	,__class__: CumulativeDelete
});
var CumulativeForwardDelete = function(editor,title) {
	this.removed_text = "";
	TextAction.call(this,editor,title != null ? title : "delete");
};
$hxClasses["CumulativeForwardDelete"] = CumulativeForwardDelete;
CumulativeForwardDelete.__name__ = ["CumulativeForwardDelete"];
CumulativeForwardDelete.create = function(editor,title) {
	var sel = window.getSelection();
	if(!sel.isCollapsed) {
		return false;
	}
	var current_node = sel.anchorNode;
	var current_range = editor.getCurrentSelectionRange();
	var range_before_selection = window.document.createRange();
	range_before_selection.setStart(editor.edit_area,0);
	range_before_selection.setEnd(current_range.startContainer,current_range.startOffset);
	var text_before_caret = range_before_selection.toString();
	var pos = text_before_caret.length;
	if(pos == editor.edit_area.textContent.length) {
		return false;
	}
	var instance = null;
	if(!editor.timeout.hasExpired() && editor.undo_stack.get_hasItems()) {
		var last_item = editor.undo_stack.getLastItem();
		if(last_item.getName() == "CumulativeForwardDelete") {
			instance = last_item;
		}
	}
	if(!instance) {
		instance = new CumulativeForwardDelete(editor,title);
		instance.position = pos;
		editor.undoStackAdd(instance);
	}
	instance.removed_text += HxOverrides.substr(sel.anchorNode.nodeValue,sel.anchorOffset,1);
	window.document.execCommand("forwardDelete");
	editor.setEditorRender([{ start : instance.position, end : null}]);
	return true;
};
CumulativeForwardDelete.__super__ = TextAction;
CumulativeForwardDelete.prototype = $extend(TextAction.prototype,{
	undo: function() {
		this.editor.replaceText(this.position,0,this.removed_text);
		this.editor.setEditorRender([{ start : this.position, end : null}]);
	}
	,redo: function() {
		this.editor.replaceText(this.position,this.removed_text.length,"");
		this.editor.setEditorRender([{ start : this.position, end : null}]);
	}
	,__class__: CumulativeForwardDelete
});
var CumulativeInsert = function(editor,$char,title) {
	TextAction.call(this,editor,title != null ? title : "insert");
	this.position = editor.getCharPosFromRangeStart(editor.getCurrentSelectionRange());
	this.new_text = "";
};
$hxClasses["CumulativeInsert"] = CumulativeInsert;
CumulativeInsert.__name__ = ["CumulativeInsert"];
CumulativeInsert.create = function(editor,$char,title) {
	var instance = null;
	if(!editor.timeout.hasExpired() && editor.undo_stack.get_hasItems()) {
		var last_item = editor.undo_stack.getLastItem();
		if(last_item.getName() == "CumulativeInsert") {
			instance = js_Boot.__cast(last_item , CumulativeInsert);
		}
	}
	if(instance == null) {
		instance = new CumulativeInsert(editor,$char,title);
		editor.undoStackAdd(instance);
	}
	instance.new_text += $char;
	window.document.execCommand("insertText",false,$char);
	editor.setEditorRender([{ start : instance.position + instance.new_text.length, end : null}]);
	return instance;
};
CumulativeInsert.__super__ = TextAction;
CumulativeInsert.prototype = $extend(TextAction.prototype,{
	undo: function() {
		this.editor.replaceText(this.position,this.new_text.length,"");
		this.editor.setEditorRender([{ start : this.position, end : null}]);
	}
	,redo: function() {
		this.editor.replaceText(this.position,0,this.new_text);
		this.editor.setEditorRender([{ start : this.position + this.new_text.length, end : null}]);
	}
	,__class__: CumulativeInsert
});
var Def = function() { };
$hxClasses["Def"] = Def;
Def.__name__ = ["Def"];
var Delete = function(editor,title) {
	this.removed_text = [];
	this.selection = [];
	TextAction.call(this,editor,title != null ? title : "delete");
	var sel = window.getSelection();
	var range_count = sel.rangeCount;
	var range = null;
	var range_points;
	var _g1 = 0;
	var _g = range_count;
	while(_g1 < _g) {
		var i = _g1++;
		range = sel.getRangeAt(i);
		range_points = editor.getRangePoints(range);
		this.selection.push(range_points);
		this.removed_text.push({ pos : range_points.start, text : range.toString()});
	}
	this.removed_text.sort(function(item1,item2) {
		return item1.pos - item2.pos;
	});
	sel.deleteFromDocument();
	editor.setEditorRender([editor.getRangePoints(editor.getCurrentSelectionRange())]);
};
$hxClasses["Delete"] = Delete;
Delete.__name__ = ["Delete"];
Delete.create = function(editor,title) {
	var sel = window.getSelection();
	if(!sel.isCollapsed) {
		editor.undoStackAdd(new Delete(editor,title));
	}
};
Delete.__super__ = TextAction;
Delete.prototype = $extend(TextAction.prototype,{
	undo: function() {
		var item;
		var _g1 = 0;
		var _g = this.removed_text.length;
		while(_g1 < _g) {
			var i = _g1++;
			item = this.removed_text[i];
			this.editor.replaceText(item.pos,0,item.text);
		}
		this.editor.setEditorRender(this.selection);
	}
	,redo: function() {
		var sel = window.getSelection();
		if(sel.isCollapsed) {
			this.editor.setSelection(this.selection);
		}
		sel.deleteFromDocument();
		this.editor.setEditorRender([this.editor.getRangePoints(sel.getRangeAt(sel.rangeCount - 1))]);
	}
	,__class__: Delete
});
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Insert = function(editor,new_text,title) {
	TextAction.call(this,editor,title != null ? title : "insert");
	this.selection = editor.getSelectionPoints();
	var current_range = editor.getCurrentSelectionRange();
	this.old_text = current_range.toString();
	this.new_text = new_text;
	this.position = this.selection[this.selection.length - 1].start;
	current_range.deleteContents();
	current_range.insertNode(window.document.createTextNode(new_text));
	editor.setEditorRender([{ start : this.position + this.new_text.length, end : null}]);
};
$hxClasses["Insert"] = Insert;
Insert.__name__ = ["Insert"];
Insert.create = function(editor,new_text,title) {
	editor.undoStackAdd(new Insert(editor,new_text,title));
};
Insert.__super__ = TextAction;
Insert.prototype = $extend(TextAction.prototype,{
	undo: function() {
		this.editor.replaceText(this.position,this.new_text.length,this.old_text);
		this.editor.setEditorRender(this.selection);
	}
	,redo: function() {
		this.editor.setSelection(this.selection);
		var current_range = this.editor.getCurrentSelectionRange();
		current_range.deleteContents();
		current_range.insertNode(window.document.createTextNode(this.new_text));
		this.editor.setEditorRender([{ start : this.position + this.new_text.length, end : null}]);
	}
	,__class__: Insert
});
Math.__name__ = ["Math"];
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
var Stack = function() {
	this.stack = [];
};
$hxClasses["Stack"] = Stack;
Stack.__name__ = ["Stack"];
Stack.prototype = {
	get_hasItems: function() {
		return this.stack.length > 0;
	}
	,getLength: function() {
		return this.stack.length;
	}
	,push: function(item) {
		this.stack.push(item);
	}
	,pop: function() {
		return this.stack.pop();
	}
	,getItem: function(index) {
		return this.stack[index];
	}
	,getItems: function() {
		return this.stack;
	}
	,getLastItem: function() {
		return this.stack[this.stack.length - 1];
	}
	,clear: function() {
		this.stack = [];
	}
	,__class__: Stack
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var Timeout = function() {
	this.last_date_now = 0;
};
$hxClasses["Timeout"] = Timeout;
Timeout.__name__ = ["Timeout"];
Timeout.prototype = {
	start: function() {
		this.last_date_now = new Date().getTime();
	}
	,clear: function() {
		this.last_date_now = 0;
	}
	,hasExpired: function() {
		return new Date().getTime() > this.last_date_now + Timeout.period;
	}
	,__class__: Timeout
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getSuperClass = function(c) {
	return c.__super__;
};
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) {
		return null;
	}
	return cl;
};
var haxe_rtti_Meta = function() { };
$hxClasses["haxe.rtti.Meta"] = haxe_rtti_Meta;
haxe_rtti_Meta.__name__ = ["haxe","rtti","Meta"];
haxe_rtti_Meta.getMeta = function(t) {
	return t.__meta__;
};
haxe_rtti_Meta.getFields = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.fields == null) {
		return { };
	} else {
		return meta.fields;
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var org_tamina_geom_Point = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["org.tamina.geom.Point"] = org_tamina_geom_Point;
org_tamina_geom_Point.__name__ = ["org","tamina","geom","Point"];
org_tamina_geom_Point.prototype = {
	__class__: org_tamina_geom_Point
};
var org_tamina_html_component_HTMLComponentEventFactory = function() { };
$hxClasses["org.tamina.html.component.HTMLComponentEventFactory"] = org_tamina_html_component_HTMLComponentEventFactory;
org_tamina_html_component_HTMLComponentEventFactory.__name__ = ["org","tamina","html","component","HTMLComponentEventFactory"];
org_tamina_html_component_HTMLComponentEventFactory.createEvent = function(type,bubbles) {
	if(bubbles == null) {
		bubbles = true;
	}
	var result = window.document.createEvent("Event");
	result.initEvent(type,bubbles,true);
	return result;
};
var org_tamina_i18n_ITranslation = function() { };
$hxClasses["org.tamina.i18n.ITranslation"] = org_tamina_i18n_ITranslation;
org_tamina_i18n_ITranslation.__name__ = ["org","tamina","i18n","ITranslation"];
org_tamina_i18n_ITranslation.prototype = {
	__class__: org_tamina_i18n_ITranslation
};
var org_tamina_i18n_LocalizationManager = function() {
	this._translations = new haxe_ds_StringMap();
};
$hxClasses["org.tamina.i18n.LocalizationManager"] = org_tamina_i18n_LocalizationManager;
org_tamina_i18n_LocalizationManager.__name__ = ["org","tamina","i18n","LocalizationManager"];
org_tamina_i18n_LocalizationManager.add = function(manager) {
	org_tamina_i18n_LocalizationManager._instance = manager;
};
org_tamina_i18n_LocalizationManager.get_instance = function() {
	if(org_tamina_i18n_LocalizationManager._instance == null) {
		org_tamina_i18n_LocalizationManager._instance = new org_tamina_i18n_LocalizationManager();
	}
	return org_tamina_i18n_LocalizationManager._instance;
};
org_tamina_i18n_LocalizationManager.prototype = {
	setTranslations: function(translations) {
		var _g = 0;
		while(_g < translations.length) {
			var translation = translations[_g];
			++_g;
			var _this = this._translations;
			var key = translation.fieldName;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,translation);
			} else {
				_this.h[key] = translation;
			}
		}
	}
	,getString: function(key) {
		var result = "";
		var _this = this._translations;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var _this1 = this._translations;
			result = (__map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key]).value;
		}
		return result;
	}
	,__class__: org_tamina_i18n_LocalizationManager
};
var org_tamina_utils_HTMLUtils = function() { };
$hxClasses["org.tamina.utils.HTMLUtils"] = org_tamina_utils_HTMLUtils;
org_tamina_utils_HTMLUtils.__name__ = ["org","tamina","utils","HTMLUtils"];
org_tamina_utils_HTMLUtils.getElementById = function(parent,id) {
	var result = null;
	if(parent.children != null) {
		var _g1 = 0;
		var _g = parent.children.length;
		while(_g1 < _g) {
			var i = _g1++;
			var el = parent.children.item(i);
			var elId = org_tamina_utils_HTMLUtils.getAttribute(el,"id");
			if(elId == id) {
				result = el;
				break;
			} else {
				result = org_tamina_utils_HTMLUtils.getElementById(el,id);
			}
		}
	}
	return result;
};
org_tamina_utils_HTMLUtils.getElementByAttribute = function(parent,attribute,value) {
	var result = null;
	if(parent.children != null) {
		var _g1 = 0;
		var _g = parent.children.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(result == null) {
				var el = parent.children.item(i);
				var elId = org_tamina_utils_HTMLUtils.getAttribute(el,attribute);
				if(elId == value) {
					result = el;
					return result;
				} else {
					result = org_tamina_utils_HTMLUtils.getElementByAttribute(el,attribute,value);
				}
			} else {
				return result;
			}
		}
	}
	return result;
};
org_tamina_utils_HTMLUtils.getAttribute = function(element,name) {
	var result = "";
	var _g1 = 0;
	var _g = element.attributes.length;
	while(_g1 < _g) {
		var i = _g1++;
		var att = element.attributes.item(i);
		if(att.name == name) {
			result = att.value;
			break;
		}
	}
	return result;
};
org_tamina_utils_HTMLUtils.getEventPath = function(event) {
	var result = [];
	if(event.target != null && js_Boot.__instanceof(event.target,HTMLElement)) {
		result = org_tamina_utils_HTMLUtils.recursivelyFindParent(event.target);
	}
	return result;
};
org_tamina_utils_HTMLUtils.recursivelyFindParent = function(element) {
	var result = [];
	result.push(element);
	if(element.nodeName.toLowerCase() != "body" && element.parentNode != null) {
		result = result.concat(org_tamina_utils_HTMLUtils.recursivelyFindParent(element.parentNode));
	}
	return result;
};
org_tamina_utils_HTMLUtils.findParent = function(element,doesMatch,maxLevel,currLevel) {
	if(currLevel == null) {
		currLevel = 0;
	}
	if(maxLevel == null) {
		maxLevel = 10;
	}
	if(doesMatch(element)) {
		return element;
	}
	if(doesMatch(element.parentElement)) {
		return element.parentElement;
	}
	if(++currLevel < maxLevel) {
		return org_tamina_utils_HTMLUtils.findParent(element.parentElement,doesMatch,maxLevel,currLevel);
	}
	return null;
};
org_tamina_utils_HTMLUtils.removeElement = function(element) {
	var result = true;
	if($bind(element,element.remove) != null) {
		element.remove();
	} else if(element.parentElement != null && element.parentElement.contains(element)) {
		element.parentElement.removeChild(element);
	} else {
		result = false;
	}
	return result;
};
org_tamina_utils_HTMLUtils.getElementOffset = function(element) {
	var result = { top : 0, left : 0};
	var rect = element.getBoundingClientRect();
	var body = window.document.body;
	var win = window;
	result.top = Math.round(rect.top + win.pageYOffset - element.clientTop);
	result.left = Math.round(rect.left + win.pageXOffset - element.clientLeft);
	return result;
};
org_tamina_utils_HTMLUtils.getTouchPosition = function(element,evt) {
	var offset = org_tamina_utils_HTMLUtils.getElementOffset(element);
	var touch = evt.touches.item(0);
	return new org_tamina_geom_Point(touch.pageX - offset.left,touch.pageY - offset.top);
};
org_tamina_utils_HTMLUtils.isTouchSupported = function() {
	var result = !!(('ontouchstart' in window)
            || (window.navigator['msPointerEnabled'] && window.navigator['msMaxTouchPoints'] > 0)
            || (window.navigator['pointerEnabled'] && window.navigator['maxTouchPoints'] > 0));
	return result;
};
org_tamina_utils_HTMLUtils.getBrowserType = function(agent) {
	if(agent == null) {
		agent = window.navigator.userAgent;
	}
	var result = org_tamina_utils_BrowserType.Unknown;
	if(new EReg("WebKit","").match(agent)) {
		if(new EReg("Chrome","").match(agent)) {
			result = org_tamina_utils_BrowserType.Chrome;
			var isAndroid = agent.indexOf("Mozilla/5.0") > -1 && agent.indexOf("Android ") > -1 && agent.indexOf("AppleWebKit") > -1;
			if(isAndroid) {
				result = org_tamina_utils_BrowserType.Android;
			}
		} else if(new EReg("Safari","").match(agent)) {
			result = org_tamina_utils_BrowserType.Safari;
		} else {
			result = org_tamina_utils_BrowserType.Opera;
		}
	} else if(new EReg("Opera","").match(agent)) {
		result = org_tamina_utils_BrowserType.Opera;
	} else if(new EReg("Mozilla","").match(agent)) {
		var isIE = agent.indexOf("MSIE ") > -1 || agent.indexOf("Trident/") > -1 || agent.indexOf("Edge/") > -1;
		var isAndroid1 = agent.indexOf("Mozilla/5.0") > -1 && agent.indexOf("Android ") > -1 && agent.indexOf("AppleWebKit") > -1;
		if(isIE) {
			result = org_tamina_utils_BrowserType.IE;
		} else if(isAndroid1) {
			result = org_tamina_utils_BrowserType.Android;
		} else {
			result = org_tamina_utils_BrowserType.FireFox;
		}
	} else {
		result = org_tamina_utils_BrowserType.IE;
	}
	return result;
};
org_tamina_utils_HTMLUtils.getIEVersion = function(ua) {
	if(ua == null) {
		ua = window.navigator.userAgent;
	}
	var ieRegex = new EReg("MSIE\\s([0-9]+)","");
	var tridentRegex = new EReg("Trident/.*rv:([0-9]+)","");
	var edgeRegex = new EReg("Edge/([0-9]+)","");
	var regexArray = [ieRegex,tridentRegex,edgeRegex];
	var _g = 0;
	while(_g < regexArray.length) {
		var regex = regexArray[_g];
		++_g;
		if(regex.match(ua)) {
			return Std.parseInt(regex.matched(1));
		}
	}
	return -1;
};
org_tamina_utils_HTMLUtils.getChromeVersion = function(ua) {
	if(ua == null) {
		ua = window.navigator.userAgent;
	}
	var chromeRegex = new EReg("Chrome/([0-9]+)","");
	if(chromeRegex.match(ua)) {
		return Std.parseInt(chromeRegex.matched(1));
	}
	return -1;
};
org_tamina_utils_HTMLUtils.getFirefoxVersion = function(ua) {
	if(ua == null) {
		ua = window.navigator.userAgent;
	}
	var firefoxRegex = new EReg("Firefox/([0-9]+)","");
	if(firefoxRegex.match(ua)) {
		return Std.parseInt(firefoxRegex.matched(1));
	}
	return -1;
};
org_tamina_utils_HTMLUtils.getSafariVersion = function(ua) {
	if(ua == null) {
		ua = window.navigator.userAgent;
	}
	var safariRegex = new EReg("Version/([0-9]+)","");
	if(safariRegex.match(ua)) {
		return Std.parseInt(safariRegex.matched(1));
	}
	return -1;
};
var org_tamina_utils_BrowserType = { __ename__ : true, __constructs__ : ["Chrome","Android","Safari","WebKitOther","FireFox","Opera","IE","Unknown"] };
org_tamina_utils_BrowserType.Chrome = ["Chrome",0];
org_tamina_utils_BrowserType.Chrome.__enum__ = org_tamina_utils_BrowserType;
org_tamina_utils_BrowserType.Android = ["Android",1];
org_tamina_utils_BrowserType.Android.__enum__ = org_tamina_utils_BrowserType;
org_tamina_utils_BrowserType.Safari = ["Safari",2];
org_tamina_utils_BrowserType.Safari.__enum__ = org_tamina_utils_BrowserType;
org_tamina_utils_BrowserType.WebKitOther = ["WebKitOther",3];
org_tamina_utils_BrowserType.WebKitOther.__enum__ = org_tamina_utils_BrowserType;
org_tamina_utils_BrowserType.FireFox = ["FireFox",4];
org_tamina_utils_BrowserType.FireFox.__enum__ = org_tamina_utils_BrowserType;
org_tamina_utils_BrowserType.Opera = ["Opera",5];
org_tamina_utils_BrowserType.Opera.__enum__ = org_tamina_utils_BrowserType;
org_tamina_utils_BrowserType.IE = ["IE",6];
org_tamina_utils_BrowserType.IE.__enum__ = org_tamina_utils_BrowserType;
org_tamina_utils_BrowserType.Unknown = ["Unknown",7];
org_tamina_utils_BrowserType.Unknown.__enum__ = org_tamina_utils_BrowserType;
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
var __map_reserved = {};
$hxClasses["Math"] = Math;
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = ["String"];
$hxClasses["Array"] = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses["Int"] = { __name__ : ["Int"]};
var Dynamic = $hxClasses["Dynamic"] = { __name__ : ["Dynamic"]};
var Float = $hxClasses["Float"] = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses["Class"] = { __name__ : ["Class"]};
var Enum = { };
CodeEditor.__meta__ = { obj : { view : ["view/CodeEditor.html"]}};
CodeEditor.highlighters = new haxe_ds_StringMap();
CodeEditor.highlighter_styles = window.document.createElement("style");
CodeEditor.__registered = (function($this) {
	var $r;
	{
		var this1 = org_tamina_html_component_HTMLApplication.get_componentsXTagList();
		var key = "-codeeditor".toLowerCase();
		var _this = this1;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,".CodeEditor");
		} else {
			_this.h[key] = ".CodeEditor";
		}
	}
	$r = true;
	return $r;
}(this));
ContextMenu.KEY = { UP_ARROW : 38, DOWN_ARROW : 40};
Def.EOL = "\n";
Def.TAB = "    ";
Timeout.period = 30000;
js_Boot.__toStr = ({ }).toString;
CodeEditor.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

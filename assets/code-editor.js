// Generated by Haxe 3.4.4
(function ($hx_exports, $global) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var haxe_IMap = function() { };
haxe_IMap.__name__ = ["haxe","IMap"];
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,__class__: haxe_ds_StringMap
};
var CodeEditor = $hx_exports["CodeEditor"] = function(settings) {
	this.regexp_ins_tab = new EReg("\n(?!\n)","g");
	this.default_settings = { font_family : "8.4pt Monaco", font_size : "8.4pt", line_height : "138%", indentation_width : 4, indentation_method : "spaces"};
	this.line_beginnings = [];
	this.highlighter = null;
	this.redo_stack = new Stack();
	this.undo_stack = new Stack();
	this.timeout = new Timeout();
	this.menu = window.document.createElement("menu");
	this.text_holder = window.document.createElement("span");
	this.edit_area = window.document.createElement("pre");
	this.line_numbers = window.document.createElement("pre");
	this.editor = window.document.createElement("div");
	this.y_margin = 2;
	this.x_margin = 3;
	var _gthis = this;
	this.settings = settings;
	this.line_numbers.className = "line-numbers";
	this.line_numbers.style.fontFamily = this.settings.font_family + ", monospace";
	this.line_numbers.style.fontSize = this.settings.font_size;
	this.line_numbers.style.lineHeight = this.settings.line_height;
	this.line_numbers.addEventListener("mousedown",function(event) {
		event.preventDefault();
		_gthis.edit_area.focus();
	});
	this.edit_area.className = "edit-area";
	this.edit_area.setAttribute("contenteditable","true");
	this.edit_area.onscroll = function(event1) {
		_gthis.line_numbers.style.top = -_gthis.edit_area.scrollTop + "px";
	};
	this.edit_area.appendChild(this.text_holder);
	this.edit_area.appendChild(window.document.createElement("br"));
	this.edit_area.addEventListener("mousedown",$bind(this,this.edit_area_onmousedown));
	this.edit_area.addEventListener("keydown",$bind(this,this.edit_area_onkeydown));
	this.edit_area.addEventListener("keypress",$bind(this,this.edit_area_onkeypress));
	this.edit_area.addEventListener("keyup",$bind(this,this.edit_area_onkeyup));
	this.edit_area.addEventListener("cut",$bind(this,this.edit_area_oncut));
	this.edit_area.addEventListener("paste",$bind(this,this.edit_area_onpaste));
	this.edit_area.style.fontFamily = this.settings.font_family + ", monospace";
	this.edit_area.style.fontSize = this.settings.font_size;
	this.edit_area.style.lineHeight = this.settings.line_height;
	this.edit_area.style.tabSize = settings.indentation_width;
	this.edit_area.style.MozTabSize = settings.indentation_width;
	this.edit_area.style.WebkitTabSize = settings.indentation_width;
	this.edit_area.style.MsTabSize = settings.indentation_width;
	this.editor.setAttribute("class","ps-code-editor");
	this.editor.setAttribute("spellcheck","false");
	this.editor.appendChild(CodeEditor.highlighter_styles);
	this.editor.appendChild(this.line_numbers);
	this.editor.appendChild(this.edit_area);
	this.editor.oncontextmenu = function(event2) {
	};
};
CodeEditor.__name__ = ["CodeEditor"];
CodeEditor.main = function() {
};
CodeEditor.addHighlighter = function(abbrev,highlighter) {
	var _this = CodeEditor.highlighters;
	if(__map_reserved[abbrev] != null) {
		_this.setReserved(abbrev,highlighter);
	} else {
		_this.h[abbrev] = highlighter;
	}
};
CodeEditor.prototype = {
	edit_area_onmousedown: function(event) {
		if(this.menu.style.visibility == "visible") {
			event.preventDefault();
			if(event.buttons == 1) {
				event.stopPropagation();
				this.menu.style.visibility = "hidden";
			}
			this.edit_area.focus();
		}
		this.timeout.clear();
	}
	,edit_area_onkeydown: function(event) {
		var sel = window.getSelection();
		var key = event.keyCode;
		if(event.metaKey || event.ctrlKey) {
			if(event.key == "s") {
				event.preventDefault();
				event.stopPropagation();
				this.editor.dispatchEvent(new CustomEvent("save",{ detail : { text : this.getText()}}));
			} else if(event.key == "y") {
				event.preventDefault();
				this.redo();
			} else if(event.key == "z") {
				event.preventDefault();
				this.undo();
			}
			return;
		}
		if(key == 8) {
			event.preventDefault();
			if(sel.isCollapsed == true) {
				CumulativeDelete.create(this);
				this.timeout.start();
			} else {
				Delete.create(this);
				this.timeout.clear();
			}
		} else if(key == 9) {
			event.preventDefault();
			if(this.settings.indentation_method == "spaces") {
				var current_range = sel.getRangeAt(sel.rangeCount - 1);
				var range_before_selection = window.document.createRange();
				range_before_selection.setStart(this.edit_area,0);
				range_before_selection.setEnd(current_range.startContainer,current_range.startOffset);
				var string = range_before_selection.toString();
				var last_newline = string.lastIndexOf(Def.EOL);
				if(last_newline != -1) {
					string = HxOverrides.substr(string,last_newline + 1,null);
				}
				var ind_width = this.settings.indentation_width;
				var count = 0;
				var _g1 = 0;
				var _g = string.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(string.charAt(i) == "\t") {
						count = count + ind_width - count % ind_width;
					} else {
						++count;
					}
				}
				var spaces = "";
				var _g11 = 0;
				var _g2 = ind_width - count % ind_width;
				while(_g11 < _g2) {
					var i1 = _g11++;
					spaces += " ";
				}
				Insert.create(this,spaces);
			} else {
				Insert.create(this,"\t");
			}
		} else if(key == 13) {
			event.preventDefault();
			Insert.create(this,Def.EOL);
		} else if(key == 46) {
			event.preventDefault();
			CumulativeForwardDelete.create(this);
			this.timeout.start();
		}
	}
	,edit_area_onkeypress: function(event) {
		var key = event.key;
		if(key.length > 1) {
			return;
		}
		var sel = window.getSelection();
		if(event.metaKey || event.ctrlKey) {
			if(key == "," || key == "<") {
				event.preventDefault();
			} else if(key == "." || event.key == ">") {
				event.preventDefault();
			}
			return;
		}
		if(event.charCode < 32) {
			return;
		}
		if(sel.isCollapsed) {
			CumulativeInsert.create(this,key);
			this.timeout.start();
		} else {
			Insert.create(this,key);
			this.timeout.clear();
		}
		event.preventDefault();
	}
	,edit_area_onkeyup: function(event) {
		var key = event.keyCode;
		if(key >= 33 && key <= 40) {
			event.stopPropagation();
			this.timeout.clear();
		}
	}
	,edit_area_oncut: function(event) {
		event.preventDefault();
		var sel = window.getSelection();
		if(!sel.isCollapsed) {
			window.document.execCommand("copy");
			Delete.create(this,"cut");
		}
	}
	,edit_area_onpaste: function(event) {
		event.preventDefault();
		var new_text = event.clipboardData.getData("text");
		if(new_text.length > 0) {
			Insert.create(this,new_text,"paste");
		}
	}
	,menu_onmousedown: function(event) {
		(js_Boot.__cast(event.target , HTMLElement)).style.visibility = "hidden";
		this.edit_area.focus();
	}
	,menu_onkeydown: function(event) {
		event.preventDefault();
		var key_code = event.keyCode;
		if(key_code == 27) {
			this.edit_area.focus();
			(js_Boot.__cast(event.target , HTMLElement)).style.visibility = "hidden";
			return;
		}
		if(key_code != 38 && key_code != 40) {
			return;
		}
		var button = event.target.querySelector("button:focus");
		var button_index = button != null ? this.menu_items_enabled.indexOf(button) : null;
		if(key_code == 38) {
			if(button != null && this.menu_items_enabled.length > 1) {
				if(button_index == 0) {
					button_index = this.menu_items_enabled.length;
				}
			} else {
				button_index = this.menu_items_enabled.length;
			}
			this.menu_items_enabled[button_index - 1].focus();
		} else if(key_code == 40) {
			if(js_Boot.__cast(button , Bool) && this.menu_items_enabled.length > 1) {
				if(button_index == this.menu_items_enabled.length - 1) {
					button_index = -1;
				}
			} else {
				button_index = -1;
			}
			this.menu_items_enabled[button_index + 1].focus();
		}
	}
	,menu_onfocusout: function(event) {
		event.target.style.visibility = "hidden";
		event.preventDefault();
	}
	,createElementWithClass: function(type,class_name) {
		var element = window.document.createElement(type);
		element.className = class_name;
		return element;
	}
	,trigger: function(element,event_name,params) {
		element.dispatchEvent(new CustomEvent(event_name,params ? params : null));
	}
	,getCurrentSelectionRange: function() {
		var sel = window.getSelection();
		if(sel.rangeCount > 0) {
			return sel.getRangeAt(sel.rangeCount - 1);
		} else {
			return null;
		}
	}
	,setFilename: function(filename) {
		this.filename = filename;
		this.highlighter = null;
		if(filename != null) {
			var dot_pos = filename.lastIndexOf(".");
			if(dot_pos != -1) {
				var ext = HxOverrides.substr(filename,dot_pos + 1,null);
				var _this = CodeEditor.highlighters;
				if((__map_reserved[ext] != null ? _this.getReserved(ext) : _this.h[ext]) != null) {
					var _this1 = CodeEditor.highlighters;
					this.highlighter = __map_reserved[ext] != null ? _this1.getReserved(ext) : _this1.h[ext];
					CodeEditor.highlighter_styles.textContent = this.highlighter.stylesheet;
				}
			}
		}
	}
	,putFocus: function() {
		this.edit_area.focus();
	}
	,getText: function() {
		return this.text_holder.textContent;
	}
	,setText: function(text) {
		if(text == null || text.length == 0) {
			this.text_holder.innerHTML = "";
		} else {
			this.renderText(text);
		}
	}
	,renderText: function(text) {
		if(text == null) {
			text = this.getText();
		}
		var line_num_string = "1\n";
		if(text == null) {
			this.text_holder.innerHTML = "";
		} else {
			var line_num = 2;
			var index = null;
			var offset = 0;
			while(true) {
				index = text.indexOf("\n",offset);
				if(!(index != -1)) {
					break;
				}
				line_num_string += line_num + "\n";
				offset = index + 1;
				++line_num;
			}
			if(this.highlighter != null) {
				var new_content = this.highlighter.highlight(text);
				this.text_holder.innerHTML = "";
				if(new_content != null) {
					this.text_holder.appendChild(new_content);
				}
			} else {
				this.text_holder.textContent = text;
			}
		}
		this.line_numbers.textContent = line_num_string;
	}
	,setEditorRender: function(selection) {
		window.setTimeout($bind(this,this.editorRender),0,selection);
	}
	,editorRender: function(selection) {
		this.renderText();
		this.setSelection(selection);
	}
	,createRange: function(start_node,start_offset,end_node,end_offset) {
		var range = window.document.createRange();
		range.setStart(start_node,start_offset);
		range.setEnd(end_node,end_offset);
		return range;
	}
	,createRangeFromCharPoints: function(points) {
		var range_start = this.findNodeByPos(points.start);
		var range_end = this.findNodeByPos(points.end);
		return this.createRange(range_start.node,range_start.offset,range_end.node,range_end.offset);
	}
	,findNodeByPos: function(pos) {
		var node = null;
		var last_node = null;
		var offset = 0;
		var found = false;
		var iterator = window.document.createNodeIterator(this.edit_area,4,null);
		while(true) {
			node = iterator.nextNode();
			if(!(node != null)) {
				break;
			}
			last_node = node;
			offset = pos;
			pos -= node.nodeValue.length;
			if(pos < 0) {
				found = true;
				break;
			}
		}
		if(!found) {
			node = last_node;
			offset = node.nodeValue.length;
		}
		return { node : node, offset : offset};
	}
	,getTextBetweenPoints: function(start_point,end_point) {
		var range = window.document.createRange();
		range.setStart(start_point.node,start_point.offset);
		range.setEnd(end_point.node,end_point.offset);
		return range.toString();
	}
	,getLineStartPoint: function(ref_node,ref_offset) {
		var pos = ref_node.nodeValue.substr(0,ref_offset).lastIndexOf(Def.EOL);
		if(pos > -1) {
			return { node : ref_node, offset : pos + 1};
		} else {
			var line_start = null;
			var _g = this.line_beginnings.length - 1;
			while(_g < 0) {
				var i = _g++;
				line_start = this.line_beginnings[i];
				if(ref_node.compareDocumentPosition(line_start.node) == 2) {
					break;
				}
			}
			return line_start;
		}
	}
	,getLineBeginnings: function() {
		var iterator = window.document.createNodeIterator(this.edit_area,4,null);
		var node;
		var offset;
		var text_content;
		var text_nodes = [];
		var line_beginnings = [];
		while(true) {
			node = iterator.nextNode();
			if(!(node != null)) {
				break;
			}
			text_nodes.push(node);
			text_content = node.nodeValue;
			offset = -1;
			while(true) {
				offset = text_content.indexOf(Def.EOL,offset + 1);
				if(!(offset != -1)) {
					break;
				}
				line_beginnings.push({ node : node, offset : offset});
			}
		}
		return { text_nodes : text_nodes, line_beginnings : line_beginnings};
	}
	,getTextNodes: function() {
		var iterator = window.document.createNodeIterator(this.edit_area,4,null);
		var text_nodes = [];
		var node;
		while(true) {
			node = iterator.nextNode();
			if(!(node != null)) {
				break;
			}
			text_nodes.push(node);
		}
	}
	,replaceText: function(position,length,new_text) {
		var where_start = this.findNodeByPos(position);
		var where_end = length > 0 ? this.findNodeByPos(position + length) : where_start;
		var range = this.createRange(where_start.node,where_start.offset,where_end.node,where_end.offset);
		range.deleteContents();
		if(new_text.length > 0) {
			range.insertNode(window.document.createTextNode(new_text));
		}
	}
	,undo: function() {
		if(this.undo_stack.hasItems()) {
			var last_item = this.undo_stack.pop();
			last_item.undo();
			this.redo_stack.push(last_item);
			this.timeout.clear();
		}
	}
	,redo: function() {
		if(this.redo_stack.hasItems()) {
			var last_item = this.redo_stack.pop();
			last_item.redo();
			this.undo_stack.push(last_item);
		}
	}
	,undoStackAdd: function(item) {
		this.undo_stack.push(item);
		this.redo_stack.clear();
	}
	,selectAll: function() {
		var sel = window.getSelection();
		sel.selectAllChildren(this.text_holder);
	}
	,getCharPositionsFromRange: function(range) {
		var range_before = this.createRange(this.edit_area,0,range.startContainer,range.startOffset);
		var start_pos = range_before.toString().length;
		return { start : start_pos, end : start_pos + range.toString().length};
	}
	,getCharPosFromRangeStart: function(range) {
		var range_before = this.createRange(this.edit_area,0,range.startContainer,range.startOffset);
		return range_before.toString().length;
	}
	,setCaretPos: function(pos) {
		var where = this.findNodeByPos(pos);
		var sel = window.getSelection();
		sel.removeAllRanges();
		sel.addRange(this.createRange(where.node,where.offset,where.node,where.offset));
	}
	,setSelection: function(spans) {
		var sel = window.getSelection();
		sel.removeAllRanges();
		var _g1 = 0;
		var _g = spans.length;
		while(_g1 < _g) {
			var i = _g1++;
			var range = window.document.createRange();
			var where_start = this.findNodeByPos(spans[i].start);
			range.setStart(where_start.node,where_start.offset);
			if(spans[i].end) {
				var where_end = this.findNodeByPos(spans[i].end);
				range.setEnd(where_end.node,where_end.offset);
			} else {
				range.setEnd(where_start.node,where_start.offset);
			}
			sel.addRange(range);
			this.edit_area.focus();
		}
	}
	,getSelectionPoints: function() {
		var output = [];
		var sel = window.getSelection();
		var _g1 = 0;
		var _g = sel.rangeCount;
		while(_g1 < _g) {
			var i = _g1++;
			var range = sel.getRangeAt(i);
			output.push(this.getRangePoints(range));
		}
		return output;
	}
	,getRangePoints: function(range) {
		var range_before = window.document.createRange();
		range_before.setStart(this.edit_area,0);
		range_before.setEnd(range.startContainer,range.startOffset);
		var start = range_before.toString().length;
		return { start : start, end : start + range.toString().length};
	}
	,indentBlock: function() {
		this.getLineBeginnings();
		var sel = window.getSelection();
		var r0 = sel.getRangeAt(sel.rangeCount - 1);
		var sel_start_node = r0.startContainer;
		var sel_start_offset = r0.startOffset;
		var sel_end_node = r0.endContainer;
		var sel_end_offset = r0.endOffset;
		var sel_start_text_node_num = this.text_nodes.indexOf(sel_start_node);
		var sel_end_text_node_num = this.text_nodes.indexOf(sel_end_node);
		var current_text_node_num = sel_start_text_node_num;
		sel_end_text_node_num = sel_start_text_node_num;
		var numba = sel_end_text_node_num;
		var first_node_val = sel_start_node.nodeValue;
		if(sel.isCollapsed == true) {
			var _g = this.line_beginnings.length - 1;
			while(_g < 0) {
				var i = _g++;
				var line_start = this.line_beginnings[i];
				if(r0.comparePoint(line_start.node,line_start.offset) == 0) {
					if(line_start.node.nodeValue.charAt(line_start.offset + 1) != Def.EOL) {
						line_start.node.insertData(line_start.offset + 1,Def.TAB);
					}
				}
			}
		}
		var sli = first_node_val.slice(0,sel_start_offset);
		var pos = sli.lastIndexOf(Def.EOL);
		if(pos == -1) {
			while(true) {
				--current_text_node_num;
				var n = this.text_nodes[current_text_node_num];
				var v = n.nodeValue;
				var last_eol = v.lastIndexOf(Def.EOL);
				if(last_eol > -1) {
					n.insertData(last_eol + 1,Def.TAB);
					break;
				}
				if(!(current_text_node_num > 0)) {
					break;
				}
			}
		} else if(first_node_val.charAt(pos + 1) != Def.EOL) {
			sel_start_node.insertData(pos + 1,Def.TAB);
		}
	}
	,indent: function(text_val) {
		return text_val.replace(this.regexp_ins_tab,Def.EOL + Def.TAB);
	}
	,__class__: CodeEditor
};
var TextAction = function(editor,title) {
	this.editor = editor;
	this.title = title;
};
TextAction.__name__ = ["TextAction"];
TextAction.prototype = {
	getName: function() {
		return Type.getClassName(js_Boot.getClass(this));
	}
	,test: function(class_name) {
		return this.getName() == class_name;
	}
	,undo: function() {
	}
	,redo: function() {
	}
	,__class__: TextAction
};
var CumulativeDelete = function(editor,title) {
	this.removed_text = "";
	TextAction.call(this,editor,title != null ? title : "delete");
};
CumulativeDelete.__name__ = ["CumulativeDelete"];
CumulativeDelete.create = function(editor,title) {
	var sel = window.getSelection();
	if(sel.isCollapsed == false) {
		return false;
	}
	var current_range = editor.getCurrentSelectionRange();
	var range_before_selection = window.document.createRange();
	range_before_selection.setStart(editor.edit_area,0);
	range_before_selection.setEnd(current_range.startContainer,current_range.startOffset);
	var text_before_caret = range_before_selection.toString();
	var pos = text_before_caret.length;
	if(pos == 0) {
		return false;
	}
	var instance = null;
	if(!editor.timeout.hasExpired() && editor.undo_stack.hasItems()) {
		var last_item = editor.undo_stack.getLastItem();
		if(last_item.getName() == "CumulativeDelete") {
			instance = last_item;
		}
	}
	if(!instance) {
		instance = new CumulativeDelete(editor,title);
		editor.undoStackAdd(instance);
	}
	instance.position = pos - 1;
	instance.removed_text = HxOverrides.substr(text_before_caret,-1,null) + Std.string(instance.removed_text);
	window.document.execCommand("delete");
	editor.setEditorRender([{ start : instance.position, end : null}]);
	return true;
};
CumulativeDelete.__super__ = TextAction;
CumulativeDelete.prototype = $extend(TextAction.prototype,{
	undo: function() {
		this.editor.replaceText(this.position,0,this.removed_text);
		this.editor.setEditorRender([{ start : this.position + this.removed_text.length, end : null}]);
	}
	,redo: function() {
		this.editor.replaceText(this.position,this.removed_text.length,"");
		this.editor.setEditorRender([{ start : this.position, end : null}]);
	}
	,__class__: CumulativeDelete
});
var CumulativeForwardDelete = function(editor,title) {
	this.removed_text = "";
	TextAction.call(this,editor,title != null ? title : "delete");
};
CumulativeForwardDelete.__name__ = ["CumulativeForwardDelete"];
CumulativeForwardDelete.create = function(editor,title) {
	var sel = window.getSelection();
	if(!sel.isCollapsed) {
		return false;
	}
	var current_node = sel.anchorNode;
	var current_range = editor.getCurrentSelectionRange();
	var range_before_selection = window.document.createRange();
	range_before_selection.setStart(editor.edit_area,0);
	range_before_selection.setEnd(current_range.startContainer,current_range.startOffset);
	var text_before_caret = range_before_selection.toString();
	var pos = text_before_caret.length;
	if(pos == editor.edit_area.textContent.length) {
		return false;
	}
	var instance = null;
	if(!editor.timeout.hasExpired() && editor.undo_stack.hasItems()) {
		var last_item = editor.undo_stack.getLastItem();
		if(last_item.getName() == "CumulativeForwardDelete") {
			instance = last_item;
		}
	}
	if(!instance) {
		instance = new CumulativeForwardDelete(editor,title);
		instance.position = pos;
		editor.undoStackAdd(instance);
	}
	instance.removed_text += HxOverrides.substr(sel.anchorNode.nodeValue,sel.anchorOffset,1);
	window.document.execCommand("forwardDelete");
	editor.setEditorRender([{ start : instance.position, end : null}]);
	return true;
};
CumulativeForwardDelete.__super__ = TextAction;
CumulativeForwardDelete.prototype = $extend(TextAction.prototype,{
	undo: function() {
		this.editor.replaceText(this.position,0,this.removed_text);
		this.editor.setEditorRender([{ start : this.position, end : null}]);
	}
	,redo: function() {
		this.editor.replaceText(this.position,this.removed_text.length,"");
		this.editor.setEditorRender([{ start : this.position, end : null}]);
	}
	,__class__: CumulativeForwardDelete
});
var CumulativeInsert = function(editor,$char,title) {
	TextAction.call(this,editor,title != null ? title : "insert");
	this.position = editor.getCharPosFromRangeStart(editor.getCurrentSelectionRange());
	this.new_text = "";
};
CumulativeInsert.__name__ = ["CumulativeInsert"];
CumulativeInsert.create = function(editor,$char,title) {
	var instance = null;
	if(!editor.timeout.hasExpired() && editor.undo_stack.hasItems()) {
		var last_item = editor.undo_stack.getLastItem();
		if(last_item.getName() == "CumulativeInsert") {
			instance = js_Boot.__cast(last_item , CumulativeInsert);
		}
	}
	if(instance == null) {
		instance = new CumulativeInsert(editor,$char,title);
		editor.undoStackAdd(instance);
	}
	instance.new_text += $char;
	window.document.execCommand("insertText",false,$char);
	editor.setEditorRender([{ start : instance.position + instance.new_text.length, end : null}]);
	return instance;
};
CumulativeInsert.__super__ = TextAction;
CumulativeInsert.prototype = $extend(TextAction.prototype,{
	undo: function() {
		this.editor.replaceText(this.position,this.new_text.length,"");
		this.editor.setEditorRender([{ start : this.position, end : null}]);
	}
	,redo: function() {
		this.editor.replaceText(this.position,0,this.new_text);
		this.editor.setEditorRender([{ start : this.position + this.new_text.length, end : null}]);
	}
	,__class__: CumulativeInsert
});
var Def = function() { };
Def.__name__ = ["Def"];
var Delete = function(editor,title) {
	this.removed_text = [];
	this.selection = [];
	TextAction.call(this,editor,title != null ? title : "delete");
	var sel = window.getSelection();
	var range_count = sel.rangeCount;
	var range = null;
	var range_points;
	var _g1 = 0;
	var _g = range_count;
	while(_g1 < _g) {
		var i = _g1++;
		range = sel.getRangeAt(i);
		range_points = editor.getRangePoints(range);
		this.selection.push(range_points);
		this.removed_text.push({ pos : range_points.start, text : range.toString()});
	}
	this.removed_text.sort(function(item1,item2) {
		return item1.pos - item2.pos;
	});
	sel.deleteFromDocument();
	editor.setEditorRender([editor.getRangePoints(editor.getCurrentSelectionRange())]);
};
Delete.__name__ = ["Delete"];
Delete.create = function(editor,title) {
	var sel = window.getSelection();
	if(!sel.isCollapsed) {
		editor.undoStackAdd(new Delete(editor,title));
	}
};
Delete.__super__ = TextAction;
Delete.prototype = $extend(TextAction.prototype,{
	undo: function() {
		var item;
		var _g1 = 0;
		var _g = this.removed_text.length;
		while(_g1 < _g) {
			var i = _g1++;
			item = this.removed_text[i];
			this.editor.replaceText(item.pos,0,item.text);
		}
		this.editor.setEditorRender(this.selection);
	}
	,redo: function() {
		var sel = window.getSelection();
		if(sel.isCollapsed) {
			this.editor.setSelection(this.selection);
		}
		sel.deleteFromDocument();
		this.editor.setEditorRender([this.editor.getRangePoints(sel.getRangeAt(sel.rangeCount - 1))]);
	}
	,__class__: Delete
});
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = ["EReg"];
EReg.prototype = {
	__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
var Insert = function(editor,new_text,title) {
	TextAction.call(this,editor,title != null ? title : "insert");
	this.selection = editor.getSelectionPoints();
	var current_range = editor.getCurrentSelectionRange();
	this.old_text = current_range.toString();
	this.new_text = new_text;
	this.position = this.selection[this.selection.length - 1].start;
	current_range.deleteContents();
	var sc = current_range.startContainer;
	current_range.startContainer.insertData(current_range.startOffset,this.new_text);
	editor.setEditorRender([{ start : this.position + this.new_text.length, end : null}]);
};
Insert.__name__ = ["Insert"];
Insert.create = function(editor,new_text,title) {
	editor.undoStackAdd(new Insert(editor,new_text,title));
};
Insert.__super__ = TextAction;
Insert.prototype = $extend(TextAction.prototype,{
	undo: function() {
		this.editor.replaceText(this.position,this.new_text.length,this.old_text);
		this.editor.setEditorRender(this.selection);
	}
	,redo: function() {
		this.editor.setSelection(this.selection);
		var current_range = this.editor.getCurrentSelectionRange();
		current_range.deleteContents();
		current_range.insertNode(window.document.createTextNode(this.new_text));
		this.editor.setEditorRender([{ start : this.position + this.new_text.length, end : null}]);
	}
	,__class__: Insert
});
Math.__name__ = ["Math"];
var Stack = function() {
	this.stack = [];
};
Stack.__name__ = ["Stack"];
Stack.prototype = {
	hasItems: function() {
		return this.stack.length > 0;
	}
	,getLength: function() {
		return this.stack.length;
	}
	,push: function(item) {
		this.stack.push(item);
	}
	,pop: function() {
		return this.stack.pop();
	}
	,getItem: function(index) {
		return this.stack[index];
	}
	,getItems: function() {
		return this.stack;
	}
	,getLastItem: function() {
		return this.stack[this.stack.length - 1];
	}
	,clear: function() {
		this.stack = [];
	}
	,__class__: Stack
};
var Std = function() { };
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var Timeout = function() {
	this.last_date_now = 0;
};
Timeout.__name__ = ["Timeout"];
Timeout.prototype = {
	start: function() {
		this.last_date_now = new Date().getTime();
	}
	,clear: function() {
		this.last_date_now = 0;
	}
	,hasExpired: function() {
		return new Date().getTime() > this.last_date_now + Timeout.period;
	}
	,__class__: Timeout
};
var Type = function() { };
Type.__name__ = ["Type"];
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = ["js","Boot"];
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
var __map_reserved = {};
String.prototype.__class__ = String;
String.__name__ = ["String"];
Array.__name__ = ["Array"];
Date.prototype.__class__ = Date;
Date.__name__ = ["Date"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
CodeEditor.highlighters = new haxe_ds_StringMap();
CodeEditor.highlighter_styles = window.document.createElement("style");
Def.EOL = "\n";
Def.TAB = "    ";
Timeout.period = 30000;
js_Boot.__toStr = ({ }).toString;
CodeEditor.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

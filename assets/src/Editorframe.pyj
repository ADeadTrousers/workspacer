import Textspace
import Actions

$ = window.parent.jQuery

# Functions will be placed here by highlighter modules.
Symphony = window.parent.Symphony
#Settings = Symphony.Extensions.Workspacer['settings'];
Context = Symphony.Context
# Functions for highlighter modules.

# Document parts
BODY = document.body
PRE_TAG = document.querySelector('pre')

last_key_code = None
caret_moved = False

x_margin = 3
y_margin = 2
in_workspace = !($(parent.document.body).data('0') == 'template' or $(parent.document.body).hasClass('template'))

#in_workspace = ($(parent.document.body).data('0') != 'template')
new_file = None
document_modified = False
syntax_highlighter = None

editor_height = None

editor_refresh_pending = false


# Editor defs

$(BODY)
.focusin(def(event):
    $(parent.document).trigger('editor-focusin')
)
.focusout(def(event):
    $(parent.document).trigger('editor-focusout')
)

$(document)
.scroll(def(event):
    $(parent.document).trigger('editor-scrolltop', $(window).scrollTop())
)

#def BODY_onMouseUp(event):
#    Textspace.registerCaretPos()

$(PRE_TAG)
.mouseup(def(event):
    Textspace.registerCaretPos()
    #alert ("Wipe")
)
.keydown(def(event):
    #nonlocal Textspace
    key = event.which
    last_key_code = key
    char = String.fromCharCode(key)

    if event.metaKey or event.ctrlKey:
        # left arrow
        if key == 37 and !Textspace.selection.collapsed:
            Textspace.action("IndentLeft")
        else if key == 39 and !Textspace.selection.collapsed:
            event.preventDefault()
            Textspace.action("IndentRight")
        else if key == 83: # "s"
            event.preventDefault()
            $(parent.document).trigger('save-doc')
        else if key == 89: # "y"
            event.preventDefault()
            Textspace.redo()
        else if key == 90: # "z"
            event.preventDefault()
            Textspace.undo()
        return

    if key == 8:
        event.preventDefault()
        Textspace.action("Delete")
    else if key == 9: #tab character
        event.preventDefault()
        if Settings['indentation_method'] == "spaces":
            ind_width = Settings['indentation_width']
            slices = Textspace.getEditorTextSlices()
            if slices.before:
                string = slices.before.split("\n").pop()
                # Count characters
                count = 0
                for JS('var i = 0; i < string.length; i++'):
                    if (string[i] == "\t"):
                        count = count + ind_width - (count % ind_width)
                    else:
                        count += 1
            for JS('var i = 0; i < ind_width - (count % ind_width); i++'):
                Textspace.action("InsertChar", " ")
        else:
            Textspace.action("InsertChar", "\t")
    else if key == 13:
        event.preventDefault()
        Textspace.action("InsertLineBreak")
    else if key == 46:
        event.preventDefault()
        Textspace.action("ForwardsDelete")
    #if(([8, 13, 32, 45, 46].indexOf(key) != -1) or (key >= 48 and key <= 90) or (key >= 163 and key <= 222))
)
.keypress(def(event):
    if event.metaKey or event.ctrlKey: return

    key = event.which
    if key < 32: return

    char = String.fromCharCode(key)

    event.preventDefault()
    Textspace.action("InsertChar", char)
)
.keyup(def(event):
    key = event.which
    if key >= 33 and key <= 40:
        Textspace.registerCaretPos()
)
.on('cut', def(event):
    Textspace.action("Cut")#, event.originalEvent.clipboardData.getData('text'))
)
.on('paste', def(event):
    event.preventDefault()
    #pasted = event.originalEvent['clipboardData'].getData('text')
    Textspace.action("Paste", event.originalEvent['clipboardData'].getData('text'))
)

def EDITOR_OUTER_onMouseDown(event):
    if event.which == 3 and $(EDITOR_MENU).is(':hidden'):
        event.preventDefault()
        #event.stopPropagation()
        $(EDITOR_MENU).trigger('openmenu', [event.clientX, event.clientY])
        PRE_TAG.contentEditable = None

def EDITOR_MENU_onMenuOpen(event, mouse_x, mouse_y):
    if $(this).is(':visible'):
        event.stopPropagation()
        return

    ul = document.createElement('ul')
    li = document.createElement('li')
    legend = document.createTextNode("Undo")
#       if (Textspace.undo_stack.length > 0) {
#       li.className="active";
#       $(li).data("action", "undo")
#       legend.textContent = "Undo " + doings[$(Textspace.history).get(-1).action];
    li.appendChild(legend)
    ul.appendChild(li)
    $(this)
    .empty()
    .append(ul)
    .css('left', mouse_x)
    .css('top', mouse_y)
    .show()
    .focus()

def EDITOR_MENU_onItemSelect(event):
    event.preventDefault()
    target = event.target
    action = $(target).data('action')
    if action = "undo":
        Textspace.undo()
    else if action = "redo":
        Textspace.redo()

#def EDITOR_MENU_onFocusOut(event)
#    $(this).hide()

#    .on('contextmenu', def(event)
#        return false;

    #.mouseup(def(event):
#        s = window.getSelection().getRangeAt(0)
#        positionEditorCaret()
#        event.stopPropagation()

#range.selectNode(document.body)

#$(EDITOR_MENU)
#.on('openmenu', EDITOR_MENU_onMenuOpen)
#.mouseup('li', EDITOR_MENU_onItemSelect)
#.focusout(EDITOR_MENU_onFocusOut)

    #if(!$(body).hasClass('unsaved-changes')) $(body).addClass('unsaved-changes')
    #if(!document_modified) {
    #    document_modified = true;
    #    breadcrumbs_filename.html(breadcrumbs_filename.html() + ' <small>â†‘</small>')


# Create highligther CSS

css_string = ""
for h in Highlighters:
    highlighter = Highlighters[h]
    prefix = "." + highlighter.style_prefix
    styles = highlighter.stylesheet
    for key in styles:
        css_string += prefix + key + " {" + styles[key] + "} "
        css_string += "\n"

document.getElementById('highlighter-styles').textContent = css_string

Textspace.setText(window.doc_text)

w = Settings['indentation_width']
PRE_TAG.style.tabSize = w
PRE_TAG.style.MozTabSize = w
PRE_TAG.style.WebkitTabSize = Settings['indentation_width']
PRE_TAG.style.MsTabSize = Settings['indentation_width']
PRE_TAG.style.OTabSize = Settings['indentation_width']

renderText()

#
# Create range.
#
def createRange(start_node, start_offset, end_node, end_offset):
    range = document.createRange()
    range.setStart(start_node, start_offset)
    range.setEnd(end_node, end_offset)
    return range

$(document).on('refreshEditorDisplay', def(event):
    if !editor_refresh_pending:
        #requestAnimationFrame(rewriteEditorContents)
        setTimeout(rewriteEditorContents, 1)
        editor_refresh_pending = true
)

def setHighlighter():
    nonlocal in_workspace, syntax_highlighter

    if in_workspace:
        filename = $(parent.document).find('#existing_file').val()
        #alert(filename)
        last_dot = filename.lastIndexOf(".")
        if last_dot > 0:
            ext = filename.slice(last_dot + 1)
            syntax_highlighter = Highlighters[ext]
        else:
            syntax_highlighter = None

    else:
        syntax_highlighter = Highlighters.xsl


#
# Write updated content to editor
#
def rewriteEditorContents():
    renderText()
    setEditorSelection()
    editor_refresh_pending = false

#
# Fill editor with highlighted text..
#
def renderText():
    nonlocal PRE_TAG

    setHighlighter()

    PRE_TAG.innerHTML = ''
    if Textspace.getText():
        frag = document.createDocumentFragment()
        if syntax_highlighter:
            lines = syntax_highlighter.highlight(Textspace.getText())
            for JS('var _i = 0; _i < lines.length; _i++'):
                sec = document.createElement('section')
                if lines[_i]:
                    sec.appendChild(lines[_i])
                else:
                    sec.appendChild(document.createTextNode(""))
                if JS('_i < (lines.length - 1)'):
                #sec.appendChild(document.createElement('br'))
                    sec.appendChild(document.createTextNode("\n"))
                else:
                    sec.appendChild(document.createElement('br'))
                    #frag.appendChild(document.createTextNode("\n"))
                #else:
                    #frag.appendChild(document.createElement('br'))
                frag.appendChild(sec)
        else:
            lines = Textspace.getText().split("\n")
            for JS('var _i = 0; _i < lines.length;'):
                frag.appendChild(document.createTextNode(lines[_i]))
                if JS('++_i < lines.length'):
                    frag.appendChild(document.createTextNode("\n"))

        PRE_TAG.appendChild(frag)
        num_lines = lines.length
    else:
        frag = document.createElement('span')
        frag.appendChild(document.createTextNode(""))
        PRE_TAG.appendChild(frag)
        num_lines = 1

    parent.window.displayLineNumbers(num_lines) #, $(PRE_TAG).height())
    #$(EDITOR_MAIN)
        #.css('minWidth', EDITOR_MAIN.clientWidth + 'px')
        #.css('minHeight', (editor.clientHeight - 4) + 'px')

#
# Caret.
#
def setEditorSelection():
    range = document.createRange()
    if (Textspace.getText()):
        pos = Textspace.getSelection()
        #console.log("pos.start = " + pos.start)
        node_start = findNodeByPos(pos.start)
        node_end = None
        if (pos.end):
            node_end = findNodeByPos(pos.end)
        else:
            node_end = node_start
        range.setStart(node_start.node, node_start.offset)
        range.setEnd(node_end.node, node_end.offset)
    else:
        range.setStart(PRE_TAG.firstChild,0)
        range.setEnd(PRE_TAG.firstChild,0)

    sel = window.getSelection()
    sel.removeAllRanges()
    sel.addRange(range)

def findNodeByPos(pos):
    if pos == 0:
        node = PRE_TAG.firstChild
        offset = 0
    else:
        iterator = document.createNodeIterator(PRE_TAG, NodeFilter.SHOW_TEXT, None, false)
        while (node = iterator.nextNode()):
            #console.log(node.nodeName)
            offset = pos
            if node.nodeType == 3:
                pos -= node.length
            else if node.nodeName.toLowerCase() == "br":
                #alert(node.nodeName.toLowerCase())
                pos -=1

            if node.nodeValue == "\n": continue
            if pos <= 0:
                found = node
                break
        #if (!found) alert("Not found")
        if !found:
            node = document.createTextNode("")
            PRE_TAG.appendChild(node)
            offset = 0
    #if (!found) alert("Not found")
    return {'node': node, 'offset': offset}

#    pos = $(panel.caret).position()
#    if (EDITOR_MAIN.scrollTop > pos.top)
#        EDITOR_MAIN.scrollTop = pos.top - y_margin;
#    n = pos.top + editor.selection.clientHeight - EDITOR_MAIN.clientHeight;
#    if(n > EDITOR_MAIN.scrollTop) EDITOR_MAIN.scrollTop = n + y_margin;*/

#   /*n = pos.left - x_margin;
#    if(EDITOR_MAIN.scrollLeft > n) EDITOR_MAIN.scrollLeft = n;
#    n = pos.left + x_margin + editor.selection.clientWidth - EDITOR_MAIN.clientWidth;
#    if (n > EDITOR_MAIN.scrollLeft) EDITOR_MAIN.scrollLeft = n;

window.getText = def():
    return Textspace.getText()

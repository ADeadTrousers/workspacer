d = document

# Functions will be placed here by highlighter modules.
#Symphony.Extensions['Workspacer'] = {'highlighters': {}}

Settings = Symphony.Extensions.Workspacer['settings']
#settings = Settings

# Document parts
pg = {}
BODY = None
SUBHEADING = None
CONTENTS = None
FORM = None
#NAME_FIELD
#SAVING_POPUP

# Editor parts
ed = {}
"""
ed.OUTER
ed.LINE_NUMBERS
ed.MAIN
ed.MAIN_HIGHLIGHTER_STYLES
ed.MAIN_PRE
EDITOR_MENU
ed.RESIZE_HANDLE
"""
replacement_actions = None
workspace_url = None
editor_url = None
directory_url = None

last_key_code = None
caret_moved = False

gutter_width = 34
x_margin = 3
y_margin = 2

in_workspace = False
new_file = False
document_modified = False
syntax_highlighter = None

style_element1 = document.createElement('style')
style_element1.type = "text/css"
style_element2 = document.createElement('style')
style_element2.type = "text/css"

editor_height = 580

editor_refresh_pending = False

editor_resize = {
    'height': 580,
    'mouse_down': False,
    'pointer_y': None
}

"""
$(BODY)
.mouseup(def(event):
    editor_resize.mouse_down = False
)
.mouseleave(def(event):
    editor_resize.mouse_down = False
)

    $('#editor-label')
 *    .click(def(event) {
 *        ed.MAIN.focus()
 *    })
 *
"""

#
# Editor defs
#

"""
def ed.OUTER_onMouseDown(event):
    if (event.which == 3 && $(EDITOR_MENU).is(':hidden')) {
        event.preventDefault()
        #event.stopPropagation()
        $(EDITOR_MENU).trigger('openmenu', [event.clientX, event.clientY])
        ed.MAIN_PRE.contentEditable = False
"""

def EDITOR_MAIN_onFocusIn(event):
    if !($(ed.OUTER).hasClass('focus')):
        $(ed.OUTER).addClass('focus')
        #positionEditorCaret()

def EDITOR_MAIN_onFocusOut(event):
    if $(ed.OUTER).hasClass('focus'):
        $(ed.OUTER).removeClass('focus')
        #positionEditorCaret()

def EDITOR_LINE_NUMBERS_onMouseDown(event):
    event.preventDefault()
    ed.MAIN.focus()

def EDITOR_MENU_onMenuOpen(event, mouse_x, mouse_y):
    if $(self).is(':visible'):
        event.stopPropagation()
        return
    ul = d.createElement('ul')
    li = d.createElement('li')
    legend = d.createTextNode("Undo")
    """
        if (Textspace.undo_stack.length > 0):
        li.className="active"
        $(li).data("action", "undo")
        legend.textContent = "Undo " + doings[$(Textspace.history).get(-1).action]

    li.appendChild(legend)
    ul.appendChild(li)
    $(self)
    .empty()
    .append(ul)
    .css('left', mouse_x)
    .css('top', mouse_y)
    .show()
    .focus()

def EDITOR_MENU_onItemSelect(event):
    event.preventDefault()
    target = event.target
    switch ($(target).data('action')) {
        case "undo":
            Textspace.undo()
            break
        case "redo":
            Textspace.redo()
            break
"""

def EDITOR_MENU_onFocusOut(event):
    $(self).hide()

def saveDocument(event):
    event.preventDefault()
    event.stopPropagation()

    if $(ed.NAME_FIELD).val() == '':
        return
    #$(SAVING_POPUP).show()
    $.ajax({
        'type': 'POST',
        'url': Symphony.Context.get('symphony') + '/extension/workspacer/ajax/'
            + Symphony.Context.get('env')['0'] + '/',
        #'data': $(FORM).serialize() + "&action%5Bsave%5D=1&ajax=1",
        'data': {
            'xsrf': $('input[name="xsrf"]').val(),
            'ajax': '1',
            'action[save]': '1',
            'fields[existing_file]': $('#existing_file').val(),
            'fields[dir_path]': $('#dir_path').val(),
            'fields[dir_path_encoded]': $('#dir_path_encoded').val(),
            'fields[name]': $('input[name="fields[name]"]').val(),
            #'fields[body]': Textspace.text
        },
        'dataType': 'json',
        'error': def(xhr, msg, error):
            #$('#saving-popup').hide()
            alert(error + " - " + msg)
        ,
        'success': def(data):
            #$(SAVING_POPUP).hide()
            if data.new_filename:
                $('input[name="fields[existing_file]"]').val(data.new_filename)
                $(SUBHEADING).text(data.new_filename)
                #history.replaceState({'a': 'b'}, '', directory_url + data.new_filename_encoded + '/')
                history.replaceState(
                    {'a': 'b'}, '',
                    Symphony.Context.get('symphony') + '/workspace/editor/' + data.new_path_encoded
                )
            #if replacement_actions:
            #    $(pg.FORM).find('div.actions').replaceWith(replacement_actions)
            #    replacement_actions = None

            $(pg.NOTIFIER).trigger('attach.notify', [data.alert_msg, data.alert_type])
            #setHighlighter()
            if $('#form-actions').hasClass('new'):
                $('#form-actions')
                .removeClass('new')
                .addClass('edit')
            # *** if (data.alert_type == 'error') window.scrollTop = 0
    })

#
# Set editor up..
#
$().ready(def():
    nonlocal Symphony, pg, ed #BODY, NOTIFIER, SUBHEADING, CONTENTS, FORM, NAME_FIELD, SAVING_POPUP
    #if (window.getSelection() == undefined) return
    pg.BODY = Symphony.Elements.body
    pg.NOTIFIER = $(Symphony.Elements.header).find('div.notifier')
    pg.SUBHEADING = $('#symphony-subheading')
    pg.CONTENTS = Symphony.Elements.contents
    pg.FORM = (pg.CONTENTS).find('form')
    pg.NAME_FIELD = $(FORM).find('input[name="fields[name]"]')
    pg.SAVING_POPUP = $('#saving-popup')

    #replacement_actions = $(FORM).find('div[data-replacement-actions="1"]').detach()
    #if (replacement_actions.length == 0): replacement_actions = None

    #in_workspace = $(BODY).is('#extension-workspace_manager_b-view')
    in_workspace = ($(BODY).hasClass('template') == False)
    if in_workspace:
        directory_url = Symphony.Context.get('symphony')
        + Symphony.Context.get('env')['page-namespace'] + '/' + $(FORM).find('input[name="fields[dir_path_encoded]"]').attr('value')

    ed.OUTER = $('#editor')[0]
    ed.LINE_NUMBERS = $('#editor-line-numbers')[0]
    #EDITOR_MENU = $('#editor-menu')[0]
    ed.RESIZE_HANDLE = $('#editor-resize-handle')[0]

    ed.MAIN = $('#editor-main')[0]

    $(pg.BODY)
    .mouseup(def(event):
        editor_resize.mouse_down = False
    )
    .mouseleave(def(event):
        editor_resize.mouse_down = False
    )

    $('#editor-label')
    .click(def(event):
        ed.MAIN.focus()
    )

    $(ed.OUTER)
    .css('height', editor_resize.height + 'px')
    #.focusin(ed.OUTER_onFocusIn)
    #.focusout(ed.OUTER_onFocusOut)
    #.mousedown(ed.OUTER_onMouseDown)
    #.mouseup(def(event)
        #ed.MAIN_PRE.contentEditable = "True"
    #)
    .on('contextmenu', def(event):
        return False
    )

#    .mouseup(def(event):
#        s = window.getSelection().getRangeAt(0)
#        positionEditorCaret()
#        event.stopPropagation()
#    )

    # range.selectNode(document.body)

    $(ed.LINE_NUMBERS)
    .mousedown(ed.LINE_NUMBERS_onMouseDown)

    #$(ed.MENU)
    #.on('openmenu', EDITOR_MENU_onMenuOpen)
    #.mouseup('li', EDITOR_MENU_onItemSelect)
    #.focusout(EDITOR_MENU_onFocusOut)

    $(ed.RESIZE_HANDLE)
    .mousedown(def(event):
        editor_resize.mouse_down = True
        editor_resize.pointer_y = event.pageY
    )
    .mousemove(def(event):
        if editor_resize.mouse_down == False: return
                            #alert(editor_resize.pointer_y)
        editor_resize.height += event.pageY - editor_resize.pointer_y
        editor_resize.pointer_y = event.pageY
        ed.OUTER.style.height = editor_resize.height + 'px'
        ed.LINE_NUMBERS.style.height = ed.MAIN.clientHeight + 'px'
    )
    .mouseleave(def(event):
        editor_resize.mouse_down = False
    )

    #if(!$(body).hasClass('unsaved-changes')) $(body).addClass('unsaved-changes')
    #if !document_modified:
    #    document_modified = True
    #    breadcrumbs_filename.html(breadcrumbs_filename.html() + ' <small>â†‘</small>')

    $(pg.NAME_FIELD).keydown(def(event):
        if event.which == 13:
            ajax_submit = True
        event.stopPropagation()
    )

    $('#form-actions input.new')
    .click(saveDocument)
    $('#form-actions input.edit')
    .click(saveDocument)

#    .click(def(event):
#        if ((event.target).name == 'action[save]') ajax_submit = True
#        if ((event.target).name == 'action[delete]') ajax_submit = False
#    )
#    .submit(saveDocument)

)

"""
    filename = None
    ext = None

    if in_workspace:
        filename = $(ed.NAME_FIELD).val()
        last_dot = filename.lastIndexOf(".")
        if last_dot > 0:
            ext = filename.slice(last_dot + 1)
            syntax_highlighter = Symphony.Extensions.Workspacer.highlighters[ext]
        else:
            syntax_highlighter = None
    else:
        syntax_highlighter = Symphony.Extensions.Workspacer.highlighters.xsl
"""

window.displayLineNumbers = def(num_lines, h):
    l = ''
    for JS('var i = 1; i <= num_lines; i++'):
        l += i + "<br>"
    $(ed.LINE_NUMBERS)
    .html(l)
    #.html(l + '<br>')
    .css('height', h + 'px')
// Generated by Haxe 3.4.4
(function ($hx_exports, $global) { "use strict";
$hx_exports["ws"] = $hx_exports["ws"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype = {
	add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new _$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,first: function() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,isEmpty: function() {
		return this.h == null;
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["_List.ListNode"] = _$List_ListNode;
_$List_ListNode.__name__ = ["_List","ListNode"];
_$List_ListNode.prototype = {
	__class__: _$List_ListNode
};
Math.__name__ = ["Math"];
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getSuperClass = function(c) {
	return c.__super__;
};
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) {
		return null;
	}
	return cl;
};
var org_tamina_html_component_HTMLApplication = function() {
};
$hxClasses["org.tamina.html.component.HTMLApplication"] = org_tamina_html_component_HTMLApplication;
org_tamina_html_component_HTMLApplication.__name__ = ["org","tamina","html","component","HTMLApplication"];
org_tamina_html_component_HTMLApplication.__properties__ = {get_componentsXTagList:"get_componentsXTagList"};
org_tamina_html_component_HTMLApplication.get_componentsXTagList = function() {
	if(org_tamina_html_component_HTMLApplication.componentsXTagList == null) {
		org_tamina_html_component_HTMLApplication.componentsXTagList = new haxe_ds_StringMap();
	}
	return org_tamina_html_component_HTMLApplication.componentsXTagList;
};
org_tamina_html_component_HTMLApplication.createInstance = function(type) {
	var className = Type.getClassName(type);
	var tag = org_tamina_html_component_HTMLApplication.getTagByClassName(className);
	return window.document.createElement(tag);
};
org_tamina_html_component_HTMLApplication.isCustomElement = function(nodeName) {
	var this1 = org_tamina_html_component_HTMLApplication.get_componentsXTagList();
	var key = nodeName.toLowerCase();
	var _this = this1;
	if(__map_reserved[key] != null) {
		return _this.existsReserved(key);
	} else {
		return _this.h.hasOwnProperty(key);
	}
};
org_tamina_html_component_HTMLApplication.getTagByClassName = function(className) {
	var result = "";
	var tag = org_tamina_html_component_HTMLApplication.get_componentsXTagList().keys();
	while(tag.hasNext()) {
		var tag1 = tag.next();
		var _this = org_tamina_html_component_HTMLApplication.get_componentsXTagList();
		var value = __map_reserved[tag1] != null ? _this.getReserved(tag1) : _this.h[tag1];
		if(value == className) {
			result = tag1;
			break;
		}
	}
	return result;
};
org_tamina_html_component_HTMLApplication.prototype = {
	loadComponents: function() {
		var tag = org_tamina_html_component_HTMLApplication.get_componentsXTagList().keys();
		while(tag.hasNext()) {
			var tag1 = tag.next();
			var _this = org_tamina_html_component_HTMLApplication.get_componentsXTagList();
			var componentClass = Type.resolveClass(__map_reserved[tag1] != null ? _this.getReserved(tag1) : _this.h[tag1]);
			window.document.registerElement(tag1,componentClass);
		}
	}
	,__class__: org_tamina_html_component_HTMLApplication
};
var Workspacer = $hx_exports["Workspacer"] = function() {
	this.directories = [];
	this.dir_boxes = [];
	org_tamina_html_component_HTMLApplication.call(this);
	Workspacer.highlighters = new haxe_ds_StringMap();
};
$hxClasses["Workspacer"] = Workspacer;
Workspacer.__name__ = ["Workspacer"];
Workspacer.main = function() {
	Workspacer._instance = new Workspacer();
	Workspacer._instance.loadComponents();
	Workspacer._instance.setup();
	$(window.document).ready(($_=Workspacer._instance,$bind($_,$_.onPageLoad)));
};
Workspacer.onReady = function(event) {
	Workspacer._instance.loadComponents();
	Workspacer._instance.setup();
};
Workspacer.filePathFromParts = function(dir_path,filename) {
	return (dir_path.length > 0 ? dir_path + "/" : "") + filename;
};
Workspacer.S_serverPost = function(data,func_done,func_error) {
	Workspacer._instance.serverPost(data,func_done,func_error);
};
Workspacer.S_getDirPaths = function() {
	return Workspacer._instance.getDirPaths();
};
Workspacer.addHighlighter = function(abbrev,highlighter) {
	var _this = Workspacer.highlighters;
	if(__map_reserved[abbrev] != null) {
		_this.setReserved(abbrev,highlighter);
	} else {
		_this.h[abbrev] = highlighter;
	}
};
Workspacer.__super__ = org_tamina_html_component_HTMLApplication;
Workspacer.prototype = $extend(org_tamina_html_component_HTMLApplication.prototype,{
	setup: function() {
		this.directories = JSON.parse($("#directories").text());
		var wrapper = window.document.getElementById("directories-wrapper");
		this.dir_boxes[0] = org_tamina_html_component_HTMLApplication.createInstance(ws_DirectoryBox);
		this.dir_boxes[0].className = "column";
		this.dir_boxes[0].directories = this.directories;
		this.dir_boxes[0].set_files(JSON.parse($("#files").text()));
		wrapper.appendChild(this.dir_boxes[0]);
		this.dir_boxes[1] = org_tamina_html_component_HTMLApplication.createInstance(ws_DirectoryBox);
		this.dir_boxes[1].className = "column";
		this.dir_boxes[1].directories = this.directories;
		this.dir_boxes[1].set_visible(false);
		wrapper.appendChild(this.dir_boxes[1]);
		this.editor_frame = org_tamina_html_component_HTMLApplication.createInstance(ws_EditorFrame);
		this.editor_frame.set_visible(false);
		$("#contents").append(this.editor_frame);
	}
	,onPageLoad: function() {
		var _gthis = this;
		this.elements = Symphony.Elements;
		$(this.elements.wrapper).find(".split-view").hide();
		this.elements.body_id = $(this.elements.body).attr("id");
		this.elements.notifier = $(this.elements.header).find("div.notifier");
		this.elements.form = $(this.elements.contents).find("form");
		this.elements.with_selected = $("#with-selected");
		$(this.dir_boxes).on("openFile",null,function(event,dir_path,filename) {
			_gthis.editor_frame.set_open(true);
			_gthis.editor_frame.dir_path = dir_path;
			_gthis.editor_frame.edit(filename);
		});
		$("ul.actions").on("click","button",function(event1) {
			var target = js_Boot.__cast(event1.target , HTMLButtonElement);
			var _g = target.name;
			switch(_g) {
			case "close-left":
				$("#directories-wrapper").removeClass("two columns");
				_gthis.dir_boxes[0].set_dir_path(_gthis.dir_boxes[1].get_dir_path());
				_gthis.dir_boxes[0].set_files(_gthis.dir_boxes[1].get_files().slice(0));
				_gthis.dir_boxes[1].set_visible(false);
				$(_gthis.elements.wrapper).find(".split-view").hide();
				$(_gthis.elements.wrapper).find(".default-view").show();
				break;
			case "close-right":
				$("#directories-wrapper").removeClass("two columns");
				_gthis.dir_boxes[1].set_visible(false);
				$(_gthis.elements.wrapper).find(".split-view").hide();
				$(_gthis.elements.wrapper).find(".default-view").show();
				break;
			case "split-view":
				$("#directories-wrapper").addClass("two columns");
				_gthis.dir_boxes[1].set_dir_path(_gthis.dir_boxes[0].get_dir_path());
				_gthis.dir_boxes[1].set_files(_gthis.dir_boxes[0].get_files().slice(0));
				_gthis.dir_boxes[1].set_visible(true);
				$(_gthis.elements.wrapper).find(".default-view").hide();
				$(_gthis.elements.wrapper).find(".split-view").show();
				break;
			}
		});
		this.disableWithSelected();
		$(window).keydown(function(event2) {
			if(event2.which == 27) {
				_gthis.editor_frame.set_open(false);
			}
		});
		$(this.elements.form).submit($bind(this,this.formSubmitHandler));
	}
	,formSubmitHandler: function(event) {
		var _gthis = this;
		var with_selected = $(this.elements.with_selected).val();
		if(with_selected == "download") {
			return;
		}
		event.preventDefault();
		$.ajax({ method : "POST", url : Workspacer.ajax_url, data : $(this.elements.form).serialize(), dataType : "json"}).done(function(data) {
			if(data.alert_msg) {
				var msg = (data.alert_msg == null ? "null" : "" + data.alert_msg) + " <a class=\"ignore\">" + Symphony.Language.get("Clear?") + "</a>";
				$(_gthis.elements.notifier).trigger("attach.notify",[msg,data.alert_type]);
				if(data.alert_type == "error") {
					$(window).scrollTop(0);
				}
			}
			if(data.directories != null) {
				_gthis.directories = data.directories;
			}
			if(data.files != null) {
				if(data.files[0] != null) {
					_gthis.dir_boxes[0].set_files(data.files[0]);
				}
				if(data.files[1] != null) {
					_gthis.dir_boxes[1].set_files(data.files[1]);
				}
			}
		}).fail(function(jqXHR,textStatus) {
			js_Browser.alert(textStatus);
		});
	}
	,disableWithSelected: function() {
		$(this.elements.with_selected).prop("disabled",true).prop("selectedIndex",0);
		$(".actions fieldset.apply").addClass("inactive");
	}
	,serverPost: function(data,func_done,func_error) {
		var _gthis = this;
		data.xsrf = Symphony.Utilities.getXSRF();
		data.dir_paths = this.getDirPaths();
		$.ajax({ method : "POST", url : Workspacer.ajax_url, data : data, dataType : "json"}).done(function(data1) {
			if(data1.alert_msg != null) {
				$(_gthis.elements.notifier).trigger("attach.notify",[data1.alert_msg,data1.alert_type]);
			}
			if(data1.directories != null) {
				_gthis.directories = data1.directories;
			}
			if(data1.files != null) {
				_gthis.dir_boxes[0].set_files(data1.files[0]);
				if(data1.files[1] != null) {
					_gthis.dir_boxes[1].set_files(data1.files[1]);
				}
			}
			if(func_done != null) {
				func_done(data1);
			}
		}).fail(function(jqXHR,textStatus) {
			js_Browser.alert(textStatus);
		});
	}
	,getDirPaths: function() {
		var to_return = [this.dir_boxes[0].get_dir_path()];
		if(this.dir_boxes[1].get_visible()) {
			to_return.push(this.dir_boxes[1].get_dir_path());
		}
		js_Browser.alert(to_return[0] + " : " + to_return[1]);
		return to_return;
	}
	,__class__: Workspacer
});
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
var haxe__$Template_TemplateExpr = { __ename__ : true, __constructs__ : ["OpVar","OpExpr","OpIf","OpStr","OpBlock","OpForeach","OpMacro"] };
haxe__$Template_TemplateExpr.OpVar = function(v) { var $x = ["OpVar",0,v]; $x.__enum__ = haxe__$Template_TemplateExpr; $x.toString = $estr; return $x; };
haxe__$Template_TemplateExpr.OpExpr = function(expr) { var $x = ["OpExpr",1,expr]; $x.__enum__ = haxe__$Template_TemplateExpr; $x.toString = $estr; return $x; };
haxe__$Template_TemplateExpr.OpIf = function(expr,eif,eelse) { var $x = ["OpIf",2,expr,eif,eelse]; $x.__enum__ = haxe__$Template_TemplateExpr; $x.toString = $estr; return $x; };
haxe__$Template_TemplateExpr.OpStr = function(str) { var $x = ["OpStr",3,str]; $x.__enum__ = haxe__$Template_TemplateExpr; $x.toString = $estr; return $x; };
haxe__$Template_TemplateExpr.OpBlock = function(l) { var $x = ["OpBlock",4,l]; $x.__enum__ = haxe__$Template_TemplateExpr; $x.toString = $estr; return $x; };
haxe__$Template_TemplateExpr.OpForeach = function(expr,loop) { var $x = ["OpForeach",5,expr,loop]; $x.__enum__ = haxe__$Template_TemplateExpr; $x.toString = $estr; return $x; };
haxe__$Template_TemplateExpr.OpMacro = function(name,params) { var $x = ["OpMacro",6,name,params]; $x.__enum__ = haxe__$Template_TemplateExpr; $x.toString = $estr; return $x; };
var haxe_Template = function(str) {
	var tokens = this.parseTokens(str);
	this.expr = this.parseBlock(tokens);
	if(!tokens.isEmpty()) {
		throw new js__$Boot_HaxeError("Unexpected '" + Std.string(tokens.first().s) + "'");
	}
};
$hxClasses["haxe.Template"] = haxe_Template;
haxe_Template.__name__ = ["haxe","Template"];
haxe_Template.prototype = {
	execute: function(context,macros) {
		this.macros = macros == null ? { } : macros;
		this.context = context;
		this.stack = new List();
		this.buf = new StringBuf();
		this.run(this.expr);
		return this.buf.b;
	}
	,resolve: function(v) {
		if(v == "__current__") {
			return this.context;
		}
		var value = Reflect.getProperty(this.context,v);
		if(value != null || Object.prototype.hasOwnProperty.call(this.context,v)) {
			return value;
		}
		var _g_head = this.stack.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var ctx = val;
			value = Reflect.getProperty(ctx,v);
			if(value != null || Object.prototype.hasOwnProperty.call(ctx,v)) {
				return value;
			}
		}
		return Reflect.field(haxe_Template.globals,v);
	}
	,parseTokens: function(data) {
		var tokens = new List();
		while(haxe_Template.splitter.match(data)) {
			var p = haxe_Template.splitter.matchedPos();
			if(p.pos > 0) {
				tokens.add({ p : HxOverrides.substr(data,0,p.pos), s : true, l : null});
			}
			if(HxOverrides.cca(data,p.pos) == 58) {
				tokens.add({ p : HxOverrides.substr(data,p.pos + 2,p.len - 4), s : false, l : null});
				data = haxe_Template.splitter.matchedRight();
				continue;
			}
			var parp = p.pos + p.len;
			var npar = 1;
			var params = [];
			var part = "";
			while(true) {
				var c = HxOverrides.cca(data,parp);
				++parp;
				if(c == 40) {
					++npar;
				} else if(c == 41) {
					--npar;
					if(npar <= 0) {
						break;
					}
				} else if(c == null) {
					throw new js__$Boot_HaxeError("Unclosed macro parenthesis");
				}
				if(c == 44 && npar == 1) {
					params.push(part);
					part = "";
				} else {
					part += String.fromCharCode(c);
				}
			}
			params.push(part);
			tokens.add({ p : haxe_Template.splitter.matched(2), s : false, l : params});
			data = HxOverrides.substr(data,parp,data.length - parp);
		}
		if(data.length > 0) {
			tokens.add({ p : data, s : true, l : null});
		}
		return tokens;
	}
	,parseBlock: function(tokens) {
		var l = new List();
		while(true) {
			var t = tokens.first();
			if(t == null) {
				break;
			}
			if(!t.s && (t.p == "end" || t.p == "else" || HxOverrides.substr(t.p,0,7) == "elseif ")) {
				break;
			}
			l.add(this.parse(tokens));
		}
		if(l.length == 1) {
			return l.first();
		}
		return haxe__$Template_TemplateExpr.OpBlock(l);
	}
	,parse: function(tokens) {
		var t = tokens.pop();
		var p = t.p;
		if(t.s) {
			return haxe__$Template_TemplateExpr.OpStr(p);
		}
		if(t.l != null) {
			var pe = new List();
			var _g = 0;
			var _g1 = t.l;
			while(_g < _g1.length) {
				var p1 = _g1[_g];
				++_g;
				pe.add(this.parseBlock(this.parseTokens(p1)));
			}
			return haxe__$Template_TemplateExpr.OpMacro(p,pe);
		}
		if(HxOverrides.substr(p,0,3) == "if ") {
			p = HxOverrides.substr(p,3,p.length - 3);
			var e = this.parseExpr(p);
			var eif = this.parseBlock(tokens);
			var t1 = tokens.first();
			var eelse;
			if(t1 == null) {
				throw new js__$Boot_HaxeError("Unclosed 'if'");
			}
			if(t1.p == "end") {
				tokens.pop();
				eelse = null;
			} else if(t1.p == "else") {
				tokens.pop();
				eelse = this.parseBlock(tokens);
				t1 = tokens.pop();
				if(t1 == null || t1.p != "end") {
					throw new js__$Boot_HaxeError("Unclosed 'else'");
				}
			} else {
				t1.p = HxOverrides.substr(t1.p,4,t1.p.length - 4);
				eelse = this.parse(tokens);
			}
			return haxe__$Template_TemplateExpr.OpIf(e,eif,eelse);
		}
		if(HxOverrides.substr(p,0,8) == "foreach ") {
			p = HxOverrides.substr(p,8,p.length - 8);
			var e1 = this.parseExpr(p);
			var efor = this.parseBlock(tokens);
			var t2 = tokens.pop();
			if(t2 == null || t2.p != "end") {
				throw new js__$Boot_HaxeError("Unclosed 'foreach'");
			}
			return haxe__$Template_TemplateExpr.OpForeach(e1,efor);
		}
		if(haxe_Template.expr_splitter.match(p)) {
			return haxe__$Template_TemplateExpr.OpExpr(this.parseExpr(p));
		}
		return haxe__$Template_TemplateExpr.OpVar(p);
	}
	,parseExpr: function(data) {
		var l = new List();
		var expr = data;
		while(haxe_Template.expr_splitter.match(data)) {
			var p = haxe_Template.expr_splitter.matchedPos();
			var k = p.pos + p.len;
			if(p.pos != 0) {
				l.add({ p : HxOverrides.substr(data,0,p.pos), s : true});
			}
			var p1 = haxe_Template.expr_splitter.matched(0);
			l.add({ p : p1, s : p1.indexOf("\"") >= 0});
			data = haxe_Template.expr_splitter.matchedRight();
		}
		if(data.length != 0) {
			l.add({ p : data, s : true});
		}
		var e;
		try {
			e = this.makeExpr(l);
			if(!l.isEmpty()) {
				throw new js__$Boot_HaxeError(l.first().p);
			}
		} catch( s ) {
			if (s instanceof js__$Boot_HaxeError) s = s.val;
			if( js_Boot.__instanceof(s,String) ) {
				throw new js__$Boot_HaxeError("Unexpected '" + s + "' in " + expr);
			} else throw(s);
		}
		return function() {
			try {
				return e();
			} catch( exc ) {
				if (exc instanceof js__$Boot_HaxeError) exc = exc.val;
				throw new js__$Boot_HaxeError("Error : " + Std.string(exc) + " in " + expr);
			}
		};
	}
	,makeConst: function(v) {
		haxe_Template.expr_trim.match(v);
		v = haxe_Template.expr_trim.matched(1);
		if(HxOverrides.cca(v,0) == 34) {
			var str = HxOverrides.substr(v,1,v.length - 2);
			return function() {
				return str;
			};
		}
		if(haxe_Template.expr_int.match(v)) {
			var i = Std.parseInt(v);
			return function() {
				return i;
			};
		}
		if(haxe_Template.expr_float.match(v)) {
			var f = parseFloat(v);
			return function() {
				return f;
			};
		}
		var me = this;
		return function() {
			return me.resolve(v);
		};
	}
	,makePath: function(e,l) {
		var p = l.first();
		if(p == null || p.p != ".") {
			return e;
		}
		l.pop();
		var field = l.pop();
		if(field == null || !field.s) {
			throw new js__$Boot_HaxeError(field.p);
		}
		var f = field.p;
		haxe_Template.expr_trim.match(f);
		f = haxe_Template.expr_trim.matched(1);
		return this.makePath(function() {
			return Reflect.field(e(),f);
		},l);
	}
	,makeExpr: function(l) {
		return this.makePath(this.makeExpr2(l),l);
	}
	,makeExpr2: function(l) {
		var p = l.pop();
		if(p == null) {
			throw new js__$Boot_HaxeError("<eof>");
		}
		if(p.s) {
			return this.makeConst(p.p);
		}
		var _g = p.p;
		switch(_g) {
		case "!":
			var e = this.makeExpr(l);
			return function() {
				var v = e();
				if(v != null) {
					return v == false;
				} else {
					return true;
				}
			};
		case "(":
			var e1 = this.makeExpr(l);
			var p1 = l.pop();
			if(p1 == null || p1.s) {
				throw new js__$Boot_HaxeError(p1);
			}
			if(p1.p == ")") {
				return e1;
			}
			var e2 = this.makeExpr(l);
			var p2 = l.pop();
			if(p2 == null || p2.p != ")") {
				throw new js__$Boot_HaxeError(p2);
			}
			var _g1 = p1.p;
			switch(_g1) {
			case "!=":
				return function() {
					return e1() != e2();
				};
			case "&&":
				return function() {
					return e1() && e2();
				};
			case "*":
				return function() {
					return e1() * e2();
				};
			case "+":
				return function() {
					return e1() + e2();
				};
			case "-":
				return function() {
					return e1() - e2();
				};
			case "/":
				return function() {
					return e1() / e2();
				};
			case "<":
				return function() {
					return e1() < e2();
				};
			case "<=":
				return function() {
					return e1() <= e2();
				};
			case "==":
				return function() {
					return e1() == e2();
				};
			case ">":
				return function() {
					return e1() > e2();
				};
			case ">=":
				return function() {
					return e1() >= e2();
				};
			case "||":
				return function() {
					return e1() || e2();
				};
			default:
				throw new js__$Boot_HaxeError("Unknown operation " + p1.p);
			}
			break;
		case "-":
			var e3 = this.makeExpr(l);
			return function() {
				return -e3();
			};
		}
		throw new js__$Boot_HaxeError(p.p);
	}
	,run: function(e) {
		switch(e[1]) {
		case 0:
			var v = e[2];
			var _this = this.buf;
			var x = Std.string(this.resolve(v));
			_this.b += Std.string(x);
			break;
		case 1:
			var e1 = e[2];
			var _this1 = this.buf;
			var x1 = Std.string(e1());
			_this1.b += Std.string(x1);
			break;
		case 2:
			var eelse = e[4];
			var eif = e[3];
			var e2 = e[2];
			var v1 = e2();
			if(v1 == null || v1 == false) {
				if(eelse != null) {
					this.run(eelse);
				}
			} else {
				this.run(eif);
			}
			break;
		case 3:
			var str = e[2];
			this.buf.b += str == null ? "null" : "" + str;
			break;
		case 4:
			var l = e[2];
			var _g_head = l.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var e3 = val;
				this.run(e3);
			}
			break;
		case 5:
			var loop = e[3];
			var e4 = e[2];
			var v2 = e4();
			try {
				var x2 = $iterator(v2)();
				if(x2.hasNext == null) {
					throw new js__$Boot_HaxeError(null);
				}
				v2 = x2;
			} catch( e5 ) {
				try {
					if(v2.hasNext == null) {
						throw new js__$Boot_HaxeError(null);
					}
				} catch( e6 ) {
					throw new js__$Boot_HaxeError("Cannot iter on " + Std.string(v2));
				}
			}
			this.stack.push(this.context);
			var v3 = v2;
			var ctx = v3;
			while(ctx.hasNext()) {
				var ctx1 = ctx.next();
				this.context = ctx1;
				this.run(loop);
			}
			this.context = this.stack.pop();
			break;
		case 6:
			var params = e[3];
			var m = e[2];
			var v4 = Reflect.field(this.macros,m);
			var pl = [];
			var old = this.buf;
			pl.push($bind(this,this.resolve));
			var _g_head1 = params.h;
			while(_g_head1 != null) {
				var val1 = _g_head1.item;
				_g_head1 = _g_head1.next;
				var p = val1;
				if(p[1] == 0) {
					var v5 = p[2];
					pl.push(this.resolve(v5));
				} else {
					this.buf = new StringBuf();
					this.run(p);
					pl.push(this.buf.b);
				}
			}
			this.buf = old;
			try {
				var _this2 = this.buf;
				var x3 = Std.string(v4.apply(this.macros,pl));
				_this2.b += Std.string(x3);
			} catch( e7 ) {
				if (e7 instanceof js__$Boot_HaxeError) e7 = e7.val;
				var plstr;
				try {
					plstr = pl.join(",");
				} catch( e8 ) {
					plstr = "???";
				}
				var msg = "Macro call " + m + "(" + plstr + ") failed (" + Std.string(e7) + ")";
				throw new js__$Boot_HaxeError(msg);
			}
			break;
		}
	}
	,__class__: haxe_Template
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_rtti_Meta = function() { };
$hxClasses["haxe.rtti.Meta"] = haxe_rtti_Meta;
haxe_rtti_Meta.__name__ = ["haxe","rtti","Meta"];
haxe_rtti_Meta.getMeta = function(t) {
	return t.__meta__;
};
haxe_rtti_Meta.getFields = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.fields == null) {
		return { };
	} else {
		return meta.fields;
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = ["js","Browser"];
js_Browser.alert = function(v) {
	window.alert(js_Boot.__string_rec(v,""));
};
var org_tamina_geom_Point = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["org.tamina.geom.Point"] = org_tamina_geom_Point;
org_tamina_geom_Point.__name__ = ["org","tamina","geom","Point"];
org_tamina_geom_Point.prototype = {
	__class__: org_tamina_geom_Point
};
var org_tamina_html_component_HTMLComponent = function() {
	this._skinPartsAttached = false;
};
$hxClasses["org.tamina.html.component.HTMLComponent"] = org_tamina_html_component_HTMLComponent;
org_tamina_html_component_HTMLComponent.__name__ = ["org","tamina","html","component","HTMLComponent"];
org_tamina_html_component_HTMLComponent.__super__ = HTMLHtmlElement;
org_tamina_html_component_HTMLComponent.prototype = $extend(HTMLHtmlElement.prototype,{
	createdCallback: function() {
		this.initDefaultValues();
		this.parseContent();
		this.initContent();
		this.displayContent();
		this.updateSkinPartsStatus();
		this.created = true;
		if(this._skinPartsAttached) {
			this.creationCompleteCallback();
		}
	}
	,creationCompleteCallback: function() {
		this.creationComplete = true;
		this.dispatchEvent(org_tamina_html_component_HTMLComponentEventFactory.createEvent("creationComplete",false));
	}
	,attachedCallback: function() {
		if(!this.initialized) {
			this.dispatchEvent(org_tamina_html_component_HTMLComponentEventFactory.createEvent("initialize",false));
		}
		this.initialized = true;
	}
	,detachedCallback: function() {
	}
	,attributeChangedCallback: function(attrName,oldVal,newVal) {
	}
	,initDefaultValues: function() {
		this._visible = true;
		this._useExternalContent = false;
		this._defaultDisplayStyle = "";
	}
	,get_visible: function() {
		return this._visible;
	}
	,set_visible: function(value) {
		this._visible = value;
		if(this._defaultDisplayStyle == "" || this._defaultDisplayStyle == "none" || this._defaultDisplayStyle == null) {
			this._defaultDisplayStyle = this.style.display;
			if(this._defaultDisplayStyle == "" || this._defaultDisplayStyle == "none") {
				this._defaultDisplayStyle = "block";
			}
		}
		if(this._visible) {
			this.style.display = this._defaultDisplayStyle;
		} else {
			this.style.display = "none";
		}
		return this._visible;
	}
	,getContent: function() {
		return this.getView();
	}
	,parseContent: function(useExternalContent) {
		if(useExternalContent == null) {
			useExternalContent = true;
		}
		var content = "";
		if(this.childElementCount == 0 || !useExternalContent) {
			content = this.translateContent(this.getContent());
			this._tempElement = window.document.createElement("div");
		} else {
			this._useExternalContent = true;
			this._tempElement = this;
			content = this.translateContent(this.innerHTML);
		}
		this._tempElement.innerHTML = content;
		var children = this._tempElement.getElementsByTagName("*");
		var _g = 0;
		while(_g < children.length) {
			var child = children[_g];
			++_g;
			if(!Object.prototype.hasOwnProperty.call(child,"host")) {
				child["host"] = this;
			}
		}
		this.initSkinParts(this._tempElement);
	}
	,initSkinParts: function(target) {
		var c = js_Boot.getClass(this);
		this._skinParts = [];
		while(c != org_tamina_html_component_HTMLComponent && c != null) {
			var meta = haxe_rtti_Meta.getFields(c);
			var metaFields = Reflect.fields(meta);
			var _g1 = 0;
			var _g = metaFields.length;
			while(_g1 < _g) {
				var i = _g1++;
				var field = Reflect.field(meta,metaFields[i]);
				if(Object.prototype.hasOwnProperty.call(field,"skinpart")) {
					var element = org_tamina_utils_HTMLUtils.getElementByAttribute(target,"data-id",metaFields[i]);
					this[metaFields[i]] = element;
					if(element == null) {
						console.log("skinpart is null: " + metaFields[i] + " from " + this.nodeName);
					}
					this._skinParts.push(element);
				}
			}
			c = Type.getSuperClass(c);
		}
	}
	,updateSkinPartsStatus: function() {
		this._skinPartsWaiting = [];
		var _g = 0;
		var _g1 = this._skinParts;
		while(_g < _g1.length) {
			var skinPart = _g1[_g];
			++_g;
			if(org_tamina_html_component_HTMLApplication.isCustomElement(skinPart.nodeName) && skinPart.initialized != true) {
				this._skinPartsWaiting.push(skinPart);
			}
		}
		this._skinPartsAttached = this._skinPartsWaiting.length == 0;
		if(!this._skinPartsAttached) {
			var _g2 = 0;
			var _g11 = this._skinPartsWaiting;
			while(_g2 < _g11.length) {
				var skinPart1 = _g11[_g2];
				++_g2;
				skinPart1.addEventListener("initialize",(function(a1,f) {
					return function() {
						f[0](a1[0]);
					};
				})([skinPart1],[$bind(this,this.skinPartReadyHandler)]));
			}
		}
	}
	,skinPartReadyHandler: function(skinPart) {
		HxOverrides.remove(this._skinPartsWaiting,skinPart);
		this._skinPartsAttached = this._skinPartsWaiting.length == 0;
		if(!this.creationComplete && this._skinPartsAttached) {
			this.creationCompleteCallback();
		}
	}
	,translateContent: function(source) {
		var content = source;
		var stringToTranslate = new RegExp("\\{\\{(?!\\}\\})(.+)\\}\\}","gim");
		var results = [];
		var result = [];
		var i = 0;
		while(true) {
			result = stringToTranslate.exec(content);
			if(!(result != null)) {
				break;
			}
			results[i] = result;
			++i;
		}
		result = [];
		var _g = 0;
		while(_g < results.length) {
			var result1 = results[_g];
			++_g;
			var totalString = result1[0];
			var key = StringTools.trim(result1[1]);
			content = StringTools.replace(content,totalString,org_tamina_i18n_LocalizationManager.get_instance().getString(key));
		}
		return content;
	}
	,initContent: function() {
	}
	,displayContent: function() {
		var numChildren = this._tempElement.children.length;
		if(!this._useExternalContent) {
			while(numChildren > 0) {
				--numChildren;
				var item = this._tempElement.children.item(0);
				this.appendChild(item);
			}
		}
	}
	,__class__: org_tamina_html_component_HTMLComponent
	,__properties__: {set_visible:"set_visible",get_visible:"get_visible"}
});
var org_tamina_html_component_HTMLComponentEventFactory = function() { };
$hxClasses["org.tamina.html.component.HTMLComponentEventFactory"] = org_tamina_html_component_HTMLComponentEventFactory;
org_tamina_html_component_HTMLComponentEventFactory.__name__ = ["org","tamina","html","component","HTMLComponentEventFactory"];
org_tamina_html_component_HTMLComponentEventFactory.createEvent = function(type,bubbles) {
	if(bubbles == null) {
		bubbles = true;
	}
	var result = window.document.createEvent("Event");
	result.initEvent(type,bubbles,true);
	return result;
};
var org_tamina_i18n_ITranslation = function() { };
$hxClasses["org.tamina.i18n.ITranslation"] = org_tamina_i18n_ITranslation;
org_tamina_i18n_ITranslation.__name__ = ["org","tamina","i18n","ITranslation"];
org_tamina_i18n_ITranslation.prototype = {
	__class__: org_tamina_i18n_ITranslation
};
var org_tamina_i18n_LocalizationManager = function() {
	this._translations = new haxe_ds_StringMap();
};
$hxClasses["org.tamina.i18n.LocalizationManager"] = org_tamina_i18n_LocalizationManager;
org_tamina_i18n_LocalizationManager.__name__ = ["org","tamina","i18n","LocalizationManager"];
org_tamina_i18n_LocalizationManager.__properties__ = {get_instance:"get_instance"};
org_tamina_i18n_LocalizationManager.add = function(manager) {
	org_tamina_i18n_LocalizationManager._instance = manager;
};
org_tamina_i18n_LocalizationManager.get_instance = function() {
	if(org_tamina_i18n_LocalizationManager._instance == null) {
		org_tamina_i18n_LocalizationManager._instance = new org_tamina_i18n_LocalizationManager();
	}
	return org_tamina_i18n_LocalizationManager._instance;
};
org_tamina_i18n_LocalizationManager.prototype = {
	setTranslations: function(translations) {
		var _g = 0;
		while(_g < translations.length) {
			var translation = translations[_g];
			++_g;
			var _this = this._translations;
			var key = translation.fieldName;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,translation);
			} else {
				_this.h[key] = translation;
			}
		}
	}
	,getString: function(key) {
		var result = "";
		var _this = this._translations;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var _this1 = this._translations;
			result = (__map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key]).value;
		}
		return result;
	}
	,__class__: org_tamina_i18n_LocalizationManager
};
var org_tamina_utils_HTMLUtils = function() { };
$hxClasses["org.tamina.utils.HTMLUtils"] = org_tamina_utils_HTMLUtils;
org_tamina_utils_HTMLUtils.__name__ = ["org","tamina","utils","HTMLUtils"];
org_tamina_utils_HTMLUtils.getElementById = function(parent,id) {
	var result = null;
	if(parent.children != null) {
		var _g1 = 0;
		var _g = parent.children.length;
		while(_g1 < _g) {
			var i = _g1++;
			var el = parent.children.item(i);
			var elId = org_tamina_utils_HTMLUtils.getAttribute(el,"id");
			if(elId == id) {
				result = el;
				break;
			} else {
				result = org_tamina_utils_HTMLUtils.getElementById(el,id);
			}
		}
	}
	return result;
};
org_tamina_utils_HTMLUtils.getElementByAttribute = function(parent,attribute,value) {
	var result = null;
	if(parent.children != null) {
		var _g1 = 0;
		var _g = parent.children.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(result == null) {
				var el = parent.children.item(i);
				var elId = org_tamina_utils_HTMLUtils.getAttribute(el,attribute);
				if(elId == value) {
					result = el;
					return result;
				} else {
					result = org_tamina_utils_HTMLUtils.getElementByAttribute(el,attribute,value);
				}
			} else {
				return result;
			}
		}
	}
	return result;
};
org_tamina_utils_HTMLUtils.getAttribute = function(element,name) {
	var result = "";
	var _g1 = 0;
	var _g = element.attributes.length;
	while(_g1 < _g) {
		var i = _g1++;
		var att = element.attributes.item(i);
		if(att.name == name) {
			result = att.value;
			break;
		}
	}
	return result;
};
org_tamina_utils_HTMLUtils.getEventPath = function(event) {
	var result = [];
	if(event.target != null && js_Boot.__instanceof(event.target,HTMLElement)) {
		result = org_tamina_utils_HTMLUtils.recursivelyFindParent(event.target);
	}
	return result;
};
org_tamina_utils_HTMLUtils.recursivelyFindParent = function(element) {
	var result = [];
	result.push(element);
	if(element.nodeName.toLowerCase() != "body" && element.parentNode != null) {
		result = result.concat(org_tamina_utils_HTMLUtils.recursivelyFindParent(element.parentNode));
	}
	return result;
};
org_tamina_utils_HTMLUtils.findParent = function(element,doesMatch,maxLevel,currLevel) {
	if(currLevel == null) {
		currLevel = 0;
	}
	if(maxLevel == null) {
		maxLevel = 10;
	}
	if(doesMatch(element)) {
		return element;
	}
	if(doesMatch(element.parentElement)) {
		return element.parentElement;
	}
	if(++currLevel < maxLevel) {
		return org_tamina_utils_HTMLUtils.findParent(element.parentElement,doesMatch,maxLevel,currLevel);
	}
	return null;
};
org_tamina_utils_HTMLUtils.removeElement = function(element) {
	var result = true;
	if($bind(element,element.remove) != null) {
		element.remove();
	} else if(element.parentElement != null && element.parentElement.contains(element)) {
		element.parentElement.removeChild(element);
	} else {
		result = false;
	}
	return result;
};
org_tamina_utils_HTMLUtils.getElementOffset = function(element) {
	var result = { top : 0, left : 0};
	var rect = element.getBoundingClientRect();
	var body = window.document.body;
	var win = window;
	result.top = Math.round(rect.top + win.pageYOffset - element.clientTop);
	result.left = Math.round(rect.left + win.pageXOffset - element.clientLeft);
	return result;
};
org_tamina_utils_HTMLUtils.getTouchPosition = function(element,evt) {
	var offset = org_tamina_utils_HTMLUtils.getElementOffset(element);
	var touch = evt.touches.item(0);
	return new org_tamina_geom_Point(touch.pageX - offset.left,touch.pageY - offset.top);
};
org_tamina_utils_HTMLUtils.isTouchSupported = function() {
	var result = !!(('ontouchstart' in window)
            || (window.navigator['msPointerEnabled'] && window.navigator['msMaxTouchPoints'] > 0)
            || (window.navigator['pointerEnabled'] && window.navigator['maxTouchPoints'] > 0));
	return result;
};
org_tamina_utils_HTMLUtils.getBrowserType = function(agent) {
	if(agent == null) {
		agent = window.navigator.userAgent;
	}
	var result = org_tamina_utils_BrowserType.Unknown;
	if(new EReg("WebKit","").match(agent)) {
		if(new EReg("Chrome","").match(agent)) {
			result = org_tamina_utils_BrowserType.Chrome;
			var isAndroid = agent.indexOf("Mozilla/5.0") > -1 && agent.indexOf("Android ") > -1 && agent.indexOf("AppleWebKit") > -1;
			if(isAndroid) {
				result = org_tamina_utils_BrowserType.Android;
			}
		} else if(new EReg("Safari","").match(agent)) {
			result = org_tamina_utils_BrowserType.Safari;
		} else {
			result = org_tamina_utils_BrowserType.Opera;
		}
	} else if(new EReg("Opera","").match(agent)) {
		result = org_tamina_utils_BrowserType.Opera;
	} else if(new EReg("Mozilla","").match(agent)) {
		var isIE = agent.indexOf("MSIE ") > -1 || agent.indexOf("Trident/") > -1 || agent.indexOf("Edge/") > -1;
		var isAndroid1 = agent.indexOf("Mozilla/5.0") > -1 && agent.indexOf("Android ") > -1 && agent.indexOf("AppleWebKit") > -1;
		if(isIE) {
			result = org_tamina_utils_BrowserType.IE;
		} else if(isAndroid1) {
			result = org_tamina_utils_BrowserType.Android;
		} else {
			result = org_tamina_utils_BrowserType.FireFox;
		}
	} else {
		result = org_tamina_utils_BrowserType.IE;
	}
	return result;
};
org_tamina_utils_HTMLUtils.getIEVersion = function(ua) {
	if(ua == null) {
		ua = window.navigator.userAgent;
	}
	var ieRegex = new EReg("MSIE\\s([0-9]+)","");
	var tridentRegex = new EReg("Trident/.*rv:([0-9]+)","");
	var edgeRegex = new EReg("Edge/([0-9]+)","");
	var regexArray = [ieRegex,tridentRegex,edgeRegex];
	var _g = 0;
	while(_g < regexArray.length) {
		var regex = regexArray[_g];
		++_g;
		if(regex.match(ua)) {
			return Std.parseInt(regex.matched(1));
		}
	}
	return -1;
};
org_tamina_utils_HTMLUtils.getChromeVersion = function(ua) {
	if(ua == null) {
		ua = window.navigator.userAgent;
	}
	var chromeRegex = new EReg("Chrome/([0-9]+)","");
	if(chromeRegex.match(ua)) {
		return Std.parseInt(chromeRegex.matched(1));
	}
	return -1;
};
org_tamina_utils_HTMLUtils.getFirefoxVersion = function(ua) {
	if(ua == null) {
		ua = window.navigator.userAgent;
	}
	var firefoxRegex = new EReg("Firefox/([0-9]+)","");
	if(firefoxRegex.match(ua)) {
		return Std.parseInt(firefoxRegex.matched(1));
	}
	return -1;
};
org_tamina_utils_HTMLUtils.getSafariVersion = function(ua) {
	if(ua == null) {
		ua = window.navigator.userAgent;
	}
	var safariRegex = new EReg("Version/([0-9]+)","");
	if(safariRegex.match(ua)) {
		return Std.parseInt(safariRegex.matched(1));
	}
	return -1;
};
var org_tamina_utils_BrowserType = { __ename__ : true, __constructs__ : ["Chrome","Android","Safari","WebKitOther","FireFox","Opera","IE","Unknown"] };
org_tamina_utils_BrowserType.Chrome = ["Chrome",0];
org_tamina_utils_BrowserType.Chrome.toString = $estr;
org_tamina_utils_BrowserType.Chrome.__enum__ = org_tamina_utils_BrowserType;
org_tamina_utils_BrowserType.Android = ["Android",1];
org_tamina_utils_BrowserType.Android.toString = $estr;
org_tamina_utils_BrowserType.Android.__enum__ = org_tamina_utils_BrowserType;
org_tamina_utils_BrowserType.Safari = ["Safari",2];
org_tamina_utils_BrowserType.Safari.toString = $estr;
org_tamina_utils_BrowserType.Safari.__enum__ = org_tamina_utils_BrowserType;
org_tamina_utils_BrowserType.WebKitOther = ["WebKitOther",3];
org_tamina_utils_BrowserType.WebKitOther.toString = $estr;
org_tamina_utils_BrowserType.WebKitOther.__enum__ = org_tamina_utils_BrowserType;
org_tamina_utils_BrowserType.FireFox = ["FireFox",4];
org_tamina_utils_BrowserType.FireFox.toString = $estr;
org_tamina_utils_BrowserType.FireFox.__enum__ = org_tamina_utils_BrowserType;
org_tamina_utils_BrowserType.Opera = ["Opera",5];
org_tamina_utils_BrowserType.Opera.toString = $estr;
org_tamina_utils_BrowserType.Opera.__enum__ = org_tamina_utils_BrowserType;
org_tamina_utils_BrowserType.IE = ["IE",6];
org_tamina_utils_BrowserType.IE.toString = $estr;
org_tamina_utils_BrowserType.IE.__enum__ = org_tamina_utils_BrowserType;
org_tamina_utils_BrowserType.Unknown = ["Unknown",7];
org_tamina_utils_BrowserType.Unknown.toString = $estr;
org_tamina_utils_BrowserType.Unknown.__enum__ = org_tamina_utils_BrowserType;
var ws_CodeEditor = function(settings) {
	this.regexp_ins_tab = new EReg("\n(?!\n)","g");
	this.settings = { font_family : "8.4pt Monaco", font_size : "8.4pt", line_height : "138%", indentation_width : 4, indentation_method : "spaces"};
	this.line_beginnings = [];
	this.highlighter = null;
	this.y_margin = 2;
	this.x_margin = 3;
	org_tamina_html_component_HTMLComponent.call(this);
};
$hxClasses["ws.CodeEditor"] = ws_CodeEditor;
ws_CodeEditor.__name__ = ["ws","CodeEditor"];
ws_CodeEditor.__super__ = org_tamina_html_component_HTMLComponent;
ws_CodeEditor.prototype = $extend(org_tamina_html_component_HTMLComponent.prototype,{
	createdCallback: function() {
		var _gthis = this;
		this.innerHTML = this.getContent();
		ws_CodeEditor.highlighter_styles = this.querySelector("style");
		this.line_numbers = this.querySelector("pre.line-numbers");
		this.edit_area = this.querySelector("pre.edit-area");
		this.line_numbers.addEventListener("mousedown",function(event) {
			event.preventDefault();
			_gthis.edit_area.focus();
		});
		this.edit_area.setAttribute("contenteditable","true");
		this.edit_area.onscroll = function(event1) {
			_gthis.line_numbers.style.top = -_gthis.edit_area.scrollTop + "px";
		};
		this.edit_area.addEventListener("mousedown",$bind(this,this.edit_area_onmousedown));
		this.edit_area.addEventListener("keydown",$bind(this,this.edit_area_onkeydown));
		this.edit_area.addEventListener("keypress",$bind(this,this.edit_area_onkeypress));
		this.edit_area.addEventListener("keyup",$bind(this,this.edit_area_onkeyup));
		this.edit_area.addEventListener("cut",$bind(this,this.edit_area_oncut));
		this.edit_area.addEventListener("paste",$bind(this,this.edit_area_onpaste));
		this.setAttribute("class","ps-code-editor");
		this.setAttribute("tabindex","0");
		this.setAttribute("spellcheck","false");
		this.menu = org_tamina_html_component_HTMLApplication.createInstance(ws_ContextMenu);
		this.menu.addItem("undo","Undo");
		this.menu.addItem("redo","Redo");
		this.menu.addItem("cut","Cut");
		this.menu.addItem("copy","Copy");
		this.menu.addItem("delete","Delete");
		this.menu.addItem("selectAll","Select all");
		this.menu.addEventListener("menu_action",$bind(this,this.editor_onmenuaction));
		this.menu.set_top(10);
		this.menu.set_left(10);
		this.menu.set_visible(false);
		this.appendChild(this.menu);
		this.addEventListener("keydown",$bind(this,this.editor_onkeydown));
		this.addEventListener("contextmenu",$bind(this,this.editor_oncontextmenu));
		this.undo_stack = new ws_editorpart_Stack();
		this.redo_stack = new ws_editorpart_Stack();
		this.timeout = new ws_editorpart_Timeout();
		ws_CodeEditor.highlighters = new haxe_ds_StringMap();
	}
	,attributeChangedCallback: function(name,old_value,new_value) {
		switch(name) {
		case "font_family":
			this.line_numbers.style.fontFamily = new_value;
			this.edit_area.style.fontFamily = new_value;
			break;
		case "font_size":
			this.line_numbers.style.fontSize = new_value;
			this.edit_area.style.fontSize = new_value;
			break;
		case "indentation_width":
			this.edit_area.style.tabSize = new_value;
			this.edit_area.style.MSTabSize = new_value;
			this.edit_area.style.MozTabSize = new_value;
			this.edit_area.style.WebkitTabSize = new_value;
			break;
		case "line_height":
			this.line_numbers.style.lineHeight = new_value;
			this.edit_area.style.lineHeight = new_value;
			break;
		}
	}
	,editor_onkeydown: function(event) {
		if(event.keyCode == 27 && this.menu.get_visible()) {
			event.stopPropagation();
			this.menu.set_visible(false);
		}
	}
	,editor_oncontextmenu: function(event) {
		event.preventDefault();
		if(this.menu.get_open()) {
			if(event.button == 2) {
				this.menu.set_open(false);
			}
		} else {
			var items_enabled = [];
			if(this.undo_stack.get_hasItems()) {
				this.menu.setItemLabel("undo","Undo " + this.undo_stack.getLastItem().title);
				items_enabled.push("undo");
			} else {
				this.menu.setItemLabel("undo","Undo");
			}
			if(this.redo_stack.get_hasItems()) {
				this.menu.setItemLabel("redo","Redo " + this.redo_stack.getLastItem().title);
				items_enabled.push("redo");
			} else {
				this.menu.setItemLabel("redo","Redo");
			}
			var selection = window.getSelection();
			if(!selection.isCollapsed) {
				items_enabled.push("cut");
				items_enabled.push("copy");
				items_enabled.push("delete");
			}
			items_enabled.push("selectAll");
			this.menu.setEnabledItems(items_enabled);
			if(event.buttons != 0) {
				if(event.clientY + this.menu.get_height() > window.innerHeight) {
					this.menu.set_top(event.clientY - this.menu.get_height() - 2);
				} else {
					this.menu.set_top(event.clientY + 2);
				}
				if(event.clientX + this.menu.get_width() > window.innerWidth) {
					this.menu.set_left(event.clientX - this.menu.get_width() - 2);
				} else {
					this.menu.set_left(event.clientX + 2);
				}
			}
			this.menu.set_open(true);
		}
	}
	,editor_onmenuaction: function(event) {
		var _g = event.detail.action;
		switch(_g) {
		case "copy":
			window.document.execCommand("copy");
			break;
		case "cut":
			window.document.execCommand("cut");
			break;
		case "delete":
			window.setTimeout($bind(this,this.deleteSelection),0);
			break;
		case "paste":
			this.edit_area.focus();
			window.document.execCommand("paste");
			break;
		case "redo":
			window.setTimeout($bind(this,this.redo),0);
			break;
		case "selectAll":
			window.setTimeout($bind(this,this.selectAll),0);
			break;
		case "undo":
			this.edit_area.focus();
			window.setTimeout($bind(this,this.undo),0);
			break;
		}
	}
	,edit_area_onmousedown: function(event) {
		if(this.menu.get_visible()) {
			event.preventDefault();
			if(event.buttons == 1) {
				event.stopPropagation();
				this.menu.set_visible(false);
			}
			this.edit_area.focus();
		}
		this.timeout.clear();
	}
	,edit_area_onkeydown: function(event) {
		var sel = window.getSelection();
		var key = event.keyCode;
		if(event.metaKey || event.ctrlKey) {
			if(event.key == "s") {
				event.preventDefault();
				event.stopPropagation();
				this.dispatchEvent(new CustomEvent("save",{ detail : { text : this.getText()}}));
			} else if(event.key == "y") {
				event.preventDefault();
				this.redo();
			} else if(event.key == "z") {
				event.preventDefault();
				this.undo();
			}
			return;
		}
		if(key == 8) {
			event.preventDefault();
			if(sel.isCollapsed == true) {
				ws_editorpart_CumulativeDelete.create(this);
				this.timeout.start();
			} else {
				ws_editorpart_Delete.create(this);
				this.timeout.clear();
			}
		} else if(key == 9) {
			event.preventDefault();
			if(this.settings.indentation_method == "spaces") {
				var current_range = sel.getRangeAt(sel.rangeCount - 1);
				var range_before_selection = window.document.createRange();
				range_before_selection.setStart(this.edit_area,0);
				range_before_selection.setEnd(current_range.startContainer,current_range.startOffset);
				var string = range_before_selection.toString();
				var last_newline = string.lastIndexOf(ws_Def.EOL);
				if(last_newline != -1) {
					string = HxOverrides.substr(string,last_newline + 1,null);
				}
				var ind_width = this.settings.indentation_width;
				var count = 0;
				var _g1 = 0;
				var _g = string.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(string.charAt(i) == "\t") {
						count = count + ind_width - count % ind_width;
					} else {
						++count;
					}
				}
				var spaces = "";
				var _g11 = 0;
				var _g2 = ind_width - count % ind_width;
				while(_g11 < _g2) {
					var i1 = _g11++;
					spaces += " ";
				}
				ws_editorpart_Insert.create(this,spaces);
			} else {
				ws_editorpart_Insert.create(this,"\t");
			}
		} else if(key == 13) {
			event.preventDefault();
			ws_editorpart_Insert.create(this,ws_Def.EOL);
		} else if(key == 46) {
			event.preventDefault();
			ws_editorpart_CumulativeForwardDelete.create(this);
			this.timeout.start();
		}
	}
	,edit_area_onkeypress: function(event) {
		var key = event.key;
		if(key.length > 1) {
			return;
		}
		var sel = window.getSelection();
		if(event.metaKey || event.ctrlKey) {
			if(key == "," || key == "<") {
				event.preventDefault();
			} else if(key == "." || event.key == ">") {
				event.preventDefault();
			} else if(key.toLowerCase() == "a") {
				event.preventDefault();
				this.selectAll();
			}
			return;
		}
		if(event.charCode < 32) {
			return;
		}
		if(sel.isCollapsed) {
			ws_editorpart_CumulativeInsert.create(this,key);
			this.timeout.start();
		} else {
			ws_editorpart_Insert.create(this,key);
			this.timeout.clear();
		}
		event.preventDefault();
	}
	,edit_area_onkeyup: function(event) {
		var key = event.keyCode;
		if(key >= 33 && key <= 40) {
			event.stopPropagation();
			this.timeout.clear();
		}
	}
	,edit_area_oncut: function(event) {
		event.preventDefault();
		var sel = window.getSelection();
		if(!sel.isCollapsed) {
			window.document.execCommand("copy");
			ws_editorpart_Delete.create(this,"cut");
		}
	}
	,edit_area_onpaste: function(event) {
		event.preventDefault();
		var new_text = event.clipboardData.getData("text");
		if(new_text.length > 0) {
			ws_editorpart_Insert.create(this,new_text,"paste");
		}
	}
	,menu_onmousedown: function(event) {
		this.menu.set_open(false);
		this.edit_area.focus();
	}
	,menu_onkeydown: function(event) {
		event.preventDefault();
		var key_code = event.keyCode;
		if(key_code == 27) {
			this.edit_area.focus();
			this.menu.set_open(false);
			return;
		}
		if(key_code != 38 && key_code != 40) {
			return;
		}
		var button = event.target.querySelector("button:focus");
		var button_index = button != null ? this.menu_items_enabled.indexOf(button) : null;
		if(key_code == 38) {
			if(button != null && this.menu_items_enabled.length > 1) {
				if(button_index == 0) {
					button_index = this.menu_items_enabled.length;
				}
			} else {
				button_index = this.menu_items_enabled.length;
			}
			this.menu_items_enabled[button_index - 1].focus();
		} else if(key_code == 40) {
			if(js_Boot.__cast(button , Bool) && this.menu_items_enabled.length > 1) {
				if(button_index == this.menu_items_enabled.length - 1) {
					button_index = -1;
				}
			} else {
				button_index = -1;
			}
			this.menu_items_enabled[button_index + 1].focus();
		}
	}
	,menu_onfocusout: function(event) {
		this.menu.set_open(false);
		event.preventDefault();
	}
	,getRect: function() {
		return this.getBoundingClientRect();
	}
	,createElementWithClass: function(type,class_name) {
		var element = window.document.createElement(type);
		element.className = class_name;
		return element;
	}
	,trigger: function(element,event_name,params) {
		element.dispatchEvent(new CustomEvent(event_name,params ? params : null));
	}
	,getCurrentSelectionRange: function() {
		var sel = window.getSelection();
		if(sel.rangeCount > 0) {
			return sel.getRangeAt(sel.rangeCount - 1);
		} else {
			return null;
		}
	}
	,addHighlighter: function(abbrev,highlighter) {
		var _this = ws_CodeEditor.highlighters;
		var value = highlighter;
		if(__map_reserved[abbrev] != null) {
			_this.setReserved(abbrev,value);
		} else {
			_this.h[abbrev] = value;
		}
	}
	,setFilename: function(filename) {
		this.filename = filename;
		this.highlighter = null;
		if(filename != null) {
			var dot_pos = filename.lastIndexOf(".");
			if(dot_pos != -1) {
				var ext = HxOverrides.substr(filename,dot_pos + 1,null);
				var _this = Workspacer.highlighters;
				if((__map_reserved[ext] != null ? _this.getReserved(ext) : _this.h[ext]) != null) {
					var _this1 = Workspacer.highlighters;
					this.highlighter = __map_reserved[ext] != null ? _this1.getReserved(ext) : _this1.h[ext];
					ws_CodeEditor.highlighter_styles.textContent = this.highlighter.stylesheet;
				}
			}
		}
	}
	,putFocus: function() {
		this.edit_area.focus();
	}
	,getText: function() {
		return this.edit_area.textContent;
	}
	,setText: function(text) {
		if(text == null || text.length == 0) {
			this.edit_area.innerHTML = "";
		} else {
			this.renderText(text);
		}
	}
	,renderText: function(text) {
		if(text == null) {
			text = this.getText();
		}
		var line_num_string = "1\n";
		if(text == null) {
			this.edit_area.innerHTML = "";
		} else {
			var line_num = 2;
			var index = null;
			var offset = 0;
			while(true) {
				index = text.indexOf("\n",offset);
				if(!(index != -1)) {
					break;
				}
				line_num_string += line_num + "\n";
				offset = index + 1;
				++line_num;
			}
			if(this.highlighter != null) {
				var new_content = this.highlighter.highlight(text);
				this.edit_area.innerHTML = "";
				if(new_content != null) {
					this.edit_area.appendChild(new_content);
				}
			} else {
				this.edit_area.textContent = text;
			}
		}
		this.edit_area.appendChild(window.document.createElement("br"));
		this.line_numbers.textContent = line_num_string;
	}
	,setEditorRender: function(selection) {
		window.setTimeout($bind(this,this.editorRender),0,selection);
	}
	,editorRender: function(selection) {
		this.renderText();
		this.setSelection(selection);
	}
	,createRange: function(start_node,start_offset,end_node,end_offset) {
		var range = window.document.createRange();
		range.setStart(start_node,start_offset);
		range.setEnd(end_node,end_offset);
		return range;
	}
	,createRangeFromCharPoints: function(points) {
		var range_start = this.findNodeByPos(points.start);
		var range_end = this.findNodeByPos(points.end);
		return this.createRange(range_start.node,range_start.offset,range_end.node,range_end.offset);
	}
	,findNodeByPos: function(pos) {
		var node = null;
		var last_node = null;
		var offset = 0;
		var found = false;
		var iterator = window.document.createNodeIterator(this.edit_area,4,null);
		while(true) {
			node = iterator.nextNode();
			if(!(node != null)) {
				break;
			}
			last_node = node;
			offset = pos;
			pos -= node.nodeValue.length;
			if(pos < 0) {
				found = true;
				break;
			}
		}
		if(!found) {
			node = this.edit_area;
			offset = this.edit_area.childNodes.length - 1;
		}
		return { node : node, offset : offset};
	}
	,getTextBetweenPoints: function(start_point,end_point) {
		var range = window.document.createRange();
		range.setStart(start_point.node,start_point.offset);
		range.setEnd(end_point.node,end_point.offset);
		return range.toString();
	}
	,getLineStartPoint: function(ref_node,ref_offset) {
		var pos = ref_node.nodeValue.substr(0,ref_offset).lastIndexOf(ws_Def.EOL);
		if(pos > -1) {
			return { node : ref_node, offset : pos + 1};
		} else {
			var line_start = null;
			var _g = this.line_beginnings.length - 1;
			while(_g < 0) {
				var i = _g++;
				line_start = this.line_beginnings[i];
				if(ref_node.compareDocumentPosition(line_start.node) == 2) {
					break;
				}
			}
			return line_start;
		}
	}
	,getLineBeginnings: function() {
		var iterator = window.document.createNodeIterator(this.edit_area,4,null);
		var node;
		var offset;
		var text_content;
		var text_nodes = [];
		var line_beginnings = [];
		while(true) {
			node = iterator.nextNode();
			if(!(node != null)) {
				break;
			}
			text_nodes.push(node);
			text_content = node.nodeValue;
			offset = -1;
			while(true) {
				offset = text_content.indexOf(ws_Def.EOL,offset + 1);
				if(!(offset != -1)) {
					break;
				}
				line_beginnings.push({ node : node, offset : offset});
			}
		}
		return { text_nodes : text_nodes, line_beginnings : line_beginnings};
	}
	,getTextNodes: function() {
		var iterator = window.document.createNodeIterator(this.edit_area,4,null);
		var text_nodes = [];
		var node;
		while(true) {
			node = iterator.nextNode();
			if(!(node != null)) {
				break;
			}
			text_nodes.push(node);
		}
	}
	,replaceText: function(position,length,new_text) {
		var where_start = this.findNodeByPos(position);
		var where_end = length > 0 ? this.findNodeByPos(position + length) : where_start;
		var range = this.createRange(where_start.node,where_start.offset,where_end.node,where_end.offset);
		range.deleteContents();
		if(new_text.length > 0) {
			range.insertNode(window.document.createTextNode(new_text));
		}
	}
	,undo: function() {
		if(this.undo_stack.get_hasItems()) {
			var last_item = this.undo_stack.pop();
			last_item.undo();
			this.redo_stack.push(last_item);
			this.timeout.clear();
		}
	}
	,redo: function() {
		if(this.redo_stack.get_hasItems()) {
			var last_item = this.redo_stack.pop();
			last_item.redo();
			this.undo_stack.push(last_item);
		}
	}
	,undoStackAdd: function(item) {
		this.undo_stack.push(item);
		this.redo_stack.clear();
	}
	,getCharPositionsFromRange: function(range) {
		var range_before = this.createRange(this.edit_area,0,range.startContainer,range.startOffset);
		var start_pos = range_before.toString().length;
		return { start : start_pos, end : start_pos + range.toString().length};
	}
	,getCharPosFromRangeStart: function(range) {
		var range_before = this.createRange(this.edit_area,0,range.startContainer,range.startOffset);
		return range_before.toString().length;
	}
	,setCaretPos: function(pos) {
		var where = this.findNodeByPos(pos);
		var sel = window.getSelection();
		sel.removeAllRanges();
		sel.addRange(this.createRange(where.node,where.offset,where.node,where.offset));
	}
	,setSelection: function(spans) {
		var sel = window.getSelection();
		sel.removeAllRanges();
		var _g1 = 0;
		var _g = spans.length;
		while(_g1 < _g) {
			var i = _g1++;
			var range = window.document.createRange();
			var where_start = this.findNodeByPos(spans[i].start);
			range.setStart(where_start.node,where_start.offset);
			if(spans[i].end) {
				var where_end = this.findNodeByPos(spans[i].end);
				range.setEnd(where_end.node,where_end.offset);
			} else {
				range.setEnd(where_start.node,where_start.offset);
			}
			sel.addRange(range);
			this.edit_area.focus();
		}
	}
	,getSelectionPoints: function() {
		var output = [];
		var sel = window.getSelection();
		var _g1 = 0;
		var _g = sel.rangeCount;
		while(_g1 < _g) {
			var i = _g1++;
			var range = sel.getRangeAt(i);
			output.push(this.getRangePoints(range));
		}
		return output;
	}
	,getRangePoints: function(range) {
		var range_before = window.document.createRange();
		range_before.setStart(this.edit_area,0);
		range_before.setEnd(range.startContainer,range.startOffset);
		var start = range_before.toString().length;
		return { start : start, end : start + range.toString().length};
	}
	,indent: function(text_val) {
		return text_val.replace(this.regexp_ins_tab,ws_Def.EOL + ws_Def.TAB);
	}
	,selectAll: function() {
		var selection = window.getSelection();
		var range = window.document.createRange();
		range.setStart(this.edit_area,0);
		range.setEnd(this.edit_area,this.edit_area.childNodes.length - 1);
		selection.removeAllRanges();
		selection.addRange(range);
		this.edit_area.focus();
	}
	,deleteSelection: function() {
		ws_editorpart_Delete.create(this);
	}
	,getView: function() {
		return "<style class=\"highlighter-styles\"></style>\n<pre class=\"line-numbers\"></pre>\n<pre class=\"edit-area\"></pre>\n\n";
	}
	,__class__: ws_CodeEditor
});
var ws_ContextMenu = $hx_exports["ws"]["ContextMenu"] = function() {
	org_tamina_html_component_HTMLComponent.call(this);
};
$hxClasses["ws.ContextMenu"] = ws_ContextMenu;
ws_ContextMenu.__name__ = ["ws","ContextMenu"];
ws_ContextMenu.__super__ = org_tamina_html_component_HTMLComponent;
ws_ContextMenu.prototype = $extend(org_tamina_html_component_HTMLComponent.prototype,{
	get_open: function() {
		return this.get_visible();
	}
	,set_open: function(isTrue) {
		if(isTrue) {
			this.set_visible(true);
			this.focus();
		} else {
			this.set_visible(false);
		}
		return isTrue;
	}
	,get_rect: function() {
		return this.getBoundingClientRect();
	}
	,get_width: function() {
		return this.clientWidth;
	}
	,get_height: function() {
		return this.clientHeight;
	}
	,get_top: function() {
		return this.getBoundingClientRect().top;
	}
	,set_top: function(value) {
		this.style.top = (value == null ? "null" : "" + value) + "px";
		return value;
	}
	,get_left: function() {
		return this.getBoundingClientRect().left;
	}
	,set_left: function(value) {
		this.style.left = (value == null ? "null" : "" + value) + "px";
		return value;
	}
	,createdCallback: function() {
		var _gthis = this;
		this.setAttribute("tabindex","0");
		this.menu_items = [];
		this.menu_items_enabled = [];
		this.onmousedown = function() {
			_gthis.set_open(false);
		};
		this.onkeydown = function(event) {
			var key = event.keyCode;
			if(_gthis.menu_items_enabled.length == 0 || key != ws_ContextMenu.KEY.UP_ARROW && key != ws_ContextMenu.KEY.DOWN_ARROW) {
				return;
			}
			var current_button = _gthis.querySelector("button:focus");
			if(current_button == null) {
				if(key == ws_ContextMenu.KEY.DOWN_ARROW) {
					_gthis.menu_items_enabled[0].focus();
				} else {
					_gthis.menu_items_enabled[_gthis.menu_items_enabled.length - 1].focus();
				}
			} else {
				var current_button_index = _gthis.menu_items_enabled.indexOf(current_button);
				if(key == ws_ContextMenu.KEY.DOWN_ARROW) {
					_gthis.menu_items_enabled[(current_button_index + 1) % _gthis.menu_items_enabled.length].focus();
				} else {
					_gthis.menu_items_enabled[current_button_index > 0 ? current_button_index - 1 : _gthis.menu_items_enabled.length - 1].focus();
				}
			}
		};
	}
	,addItem: function(name,label) {
		var _gthis = this;
		var button = window.document.createElement("button");
		button.name = name;
		button.textContent = label;
		button.onmousemove = function(event) {
			var button1 = js_Boot.__cast(event.target , HTMLButtonElement);
			if(!button1.disabled) {
				button1.focus();
			}
		};
		button.onmouseout = function(event1) {
			var button2 = js_Boot.__cast(event1.target , HTMLButtonElement);
			_gthis.focus();
		};
		button.onmousedown = function(event2) {
			var button3 = js_Boot.__cast(event2.target , HTMLButtonElement);
			if(button3.disabled) {
				event2.stopPropagation();
			} else {
				_gthis.dispatchEvent(new CustomEvent("menu_action",{ bubbles : true, detail : { action : button3.name}}));
			}
		};
		button.onkeydown = function(event3) {
			if(event3.keyCode == 13) {
				event3.target.dispatchEvent(new MouseEvent("mousedown",{ bubbles : true}));
			}
		};
		this.appendChild(button);
		this.menu_items.push(button);
	}
	,setItemLabel: function(name,label) {
		this.querySelector("button[name=\"" + name + "\"]").textContent = label;
	}
	,setEnabledItems: function(enabled_items) {
		this.menu_items_enabled = [];
		var _g = 0;
		var _g1 = this.menu_items;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			if(enabled_items.indexOf(button.name) != -1) {
				button.disabled = false;
				this.menu_items_enabled.push(button);
			} else {
				button.disabled = true;
			}
		}
	}
	,getView: function() {
		return "";
	}
	,__class__: ws_ContextMenu
	,__properties__: $extend(org_tamina_html_component_HTMLComponent.prototype.__properties__,{set_left:"set_left",set_top:"set_top",get_height:"get_height",get_width:"get_width",get_rect:"get_rect",set_open:"set_open",get_open:"get_open"})
});
var ws_Def = function() { };
$hxClasses["ws.Def"] = ws_Def;
ws_Def.__name__ = ["ws","Def"];
var ws_DirectoryBox = $hx_exports["ws"]["DirectoryBox"] = function() {
	this.directories = [];
	org_tamina_html_component_HTMLComponent.call(this);
};
$hxClasses["ws.DirectoryBox"] = ws_DirectoryBox;
ws_DirectoryBox.__name__ = ["ws","DirectoryBox"];
ws_DirectoryBox.__super__ = org_tamina_html_component_HTMLComponent;
ws_DirectoryBox.prototype = $extend(org_tamina_html_component_HTMLComponent.prototype,{
	get_dir_path: function() {
		return this._dir_path;
	}
	,set_dir_path: function(value) {
		return this._dir_path = value;
	}
	,get_files: function() {
		return this._files;
	}
	,set_files: function(files) {
		haxe_Template.globals.current_dir = this.get_dir_path();
		this.directories_template = new haxe_Template("::foreach directories::\n<option value=\"::path::\"::if (path==current_dir):: selected::end::>::if (title)::::title::::else::::path::::end::</option>\n::end::");
		var h = this.directories_template.execute({ dir_num : this.dataset.dirNum, directories : this.directories},this);
		this.querySelector("select").innerHTML = h;
		this.files_template = new haxe_Template("<thead>\n    <tr>\n        <th scope=\"col\">Name</th>\n        <th scope=\"col\">Description</th>\n        <th scope=\"col\">Size</th>\n        <th scope=\"col\">Last Modified</th>\n    </tr>\n</thead>\n<tbody>\n    ::if files.length::\n    ::foreach files::<tr>\n        <td>\n            <a class=\"::class::\" title=\"::title::\" data-href=\"::href::\" tabindex=\"0\">::name::</a>\n            <label class=\"accessible\" for=\"::href::\">Select File &apos;::name::&apos;</label>\n            <input name=\"sets[::set_num::][items][::name::]\" value=\"yes\" type=\"checkbox\" id=\"::href::\"/>\n        </td>\n        <td>::description::</td>\n        <td>::size::</td>\n        <td>::mtime::</td>\n    </tr>::end::\n    ::else::<tr><td class=\"inactive\" colspan=\"4\">None found.</td></tr>\n    ::end::\n</tbody>");
		this._files = files;
		this.deselect();
		haxe_Template.globals.set_num = this.dataset.dirNum;
		var h1 = this.files_template.execute({ set_num : this.dataset.dirNum, files : files},this);
		this.querySelector("table").innerHTML = h1;
		return this._files;
	}
	,createdCallback: function() {
		this.set_dir_path("");
		this.innerHTML = this.getView();
	}
	,attachedCallback: function() {
		this._directory_list = js_Boot.__cast(this.querySelector("select") , HTMLSelectElement);
		this._file_list = js_Boot.__cast(this.querySelector("table") , HTMLTableElement);
		$(this).on("click","button",$bind(this,this.onButtonClick));
		$(this).on("change","select",$bind(this,this.onSelectChange));
		$(this).on("click","a.dir",$bind(this,this.onDirectoryAnchorClick));
		$(this).on("keypress","a.dir",$bind(this,this.onDirectoryAnchorKeyPress));
		$(this).on("click","a.file",$bind(this,this.onFileAnchorClick));
		$(this).on("keypress","a.file",$bind(this,this.onFileAnchorKeyPress));
	}
	,render: function() {
	}
	,hideAddBox: function() {
		$(this).find("div.add-box").hide();
	}
	,loadDirData: function(dir_path) {
		var _gthis = this;
		$.ajax({ method : "GET", url : Symphony.Context.get("symphony") + "/extension/workspacer/ajax/manage/", data : { xsrf : Symphony.Utilities.getXSRF(), action : "directory-data", dir_path : dir_path}, dataType : "json"}).done(function(data) {
			var data1 = data.directories;
			_gthis.set_dir_path(dir_path);
			_gthis.set_files(data.files);
		}).fail(function(jqXHR,textStatus) {
			window.alert(textStatus);
		});
	}
	,deselect: function() {
		$(this).find(".selected").removeClass("selected").trigger("deselect.selectable");
	}
	,triggerOpenFile: function(event) {
		var target = js_Boot.__cast(event.target , HTMLAnchorElement);
		var filename = target.dataset.href;
		$(this).trigger("openFile",[this.get_dir_path(),filename]);
	}
	,filePathFromParts: function(dir_path,filename) {
		return (dir_path ? (dir_path == null ? "null" : "" + dir_path) + "/" : "") + filename;
	}
	,onButtonClick: function(event) {
		var action = (js_Boot.__cast(event.target , HTMLButtonElement)).name;
		switch(action) {
		case "cancel_dirs":
			$(this).find(".add-dirs-box").slideUp(120);
			break;
		case "create_dirs":
			$(this).find(".add-dirs-box").slideUp(120);
			var v = $(this).find("textarea").val();
			break;
		case "new":
			$(this).find(".add-box").slideToggle(120);
			break;
		case "new_dirs":
			this.hideAddBox();
			$(this).find(".add-dirs-box").slideDown(120);
			break;
		case "new_file":
			this.hideAddBox();
			$(this).trigger("openFile",[this.get_dir_path(),null]);
			break;
		}
	}
	,onSelectChange: function(event) {
		var target = js_Boot.__cast(event.target , HTMLSelectElement);
		this.loadDirData(target.value);
	}
	,onDirectoryAnchorClick: function(event) {
		this.loadDirectory(event);
	}
	,onDirectoryAnchorKeyPress: function(event) {
		if(event.which == 13) {
			this.loadDirectory(event);
		}
	}
	,loadDirectory: function(event) {
		var target = js_Boot.__cast(event.target , HTMLAnchorElement);
		var new_dir_path = (this.get_dir_path().length > 0 ? this.get_dir_path() + "/" : "") + target.dataset.href;
		this.loadDirData(new_dir_path);
	}
	,onFileAnchorClick: function(event) {
		this.triggerOpenFile(event);
	}
	,onFileAnchorKeyPress: function(event) {
		if(event.keyCode == 13) {
			this.triggerOpenFile(event);
		}
	}
	,getView: function() {
		return "<fieldset class=\"dir-controls\">\n    <select data-id=\"_directory_list\" name=\"sets[::set_num::][dir_path]\"></select>\n    <button type=\"button\" name=\"new\" class=\"button add\">+</button>\n</fieldset>\n<div class=\"dir-controls add-box\">\n<button class=\"button\" type=\"button\" name=\"new_file\">New file</button>\n<button class=\"button\" type=\"button\" name=\"new_dirs\">{{New directories}}</button>\n</div>\n<div class=\"dir-controls add-dirs-box\" style=\"display: none\">\n<label>New Directories<i>Put each name on a separate line</i><textarea name=\"dir_names\"></textarea></label> <button class=\"button\" type=\"button\" name=\"create_dirs\">Create</button>\n<button class=\"button\" type=\"button\" name=\"cancel_dirs\">Cancel</button>\n</div><table data-id=\"_file_list\" class=\"selectable\" data-interactive=\"interactive\"></table>\n";
	}
	,__class__: ws_DirectoryBox
	,__properties__: $extend(org_tamina_html_component_HTMLComponent.prototype.__properties__,{set_files:"set_files",get_files:"get_files",set_dir_path:"set_dir_path",get_dir_path:"get_dir_path"})
});
var ws_EditorFrame = $hx_exports["ws"]["EditorFrame"] = function() {
	org_tamina_html_component_HTMLComponent.call(this);
};
$hxClasses["ws.EditorFrame"] = ws_EditorFrame;
ws_EditorFrame.__name__ = ["ws","EditorFrame"];
ws_EditorFrame.__super__ = org_tamina_html_component_HTMLComponent;
ws_EditorFrame.prototype = $extend(org_tamina_html_component_HTMLComponent.prototype,{
	attachedCallback: function() {
		var _gthis = this;
		this.code_editor = org_tamina_html_component_HTMLApplication.createInstance(ws_CodeEditor);
		var settings = JSON.parse($("#editor-settings").text());
		var value;
		var _g = 0;
		var _g1 = Reflect.fields(settings);
		while(_g < _g1.length) {
			var name = _g1[_g];
			++_g;
			value = Reflect.field(settings,name);
			if(value != null) {
				this.code_editor.setAttribute(name,value);
			}
		}
		$(this.code_editor).on("save",null,function(event) {
			$(_gthis).find("button[accesskey=\"s\"]").trigger("click");
		});
		$(this.code_editor).insertAfter($(this).find("header"));
		$(this).on("click","button",$bind(this,this.onButtonClick));
	}
	,set_open: function(isTrue) {
		if(isTrue) {
			window.getSelection().removeAllRanges();
			this.set_visible(true);
			$("#mask").show();
		} else {
			this.set_visible(false);
			$("#mask").hide();
		}
		return isTrue;
	}
	,set_headerText: function(text) {
		$(this).find("header p").text(text);
		return text;
	}
	,getFilePath: function(filename) {
		return (this.dir_path.length > 0 ? this.dir_path + "/" : "") + filename;
	}
	,edit: function(filename) {
		var _gthis = this;
		if(filename != null) {
			this.potential_filename = filename;
			this.set_headerText("Loading " + this.getFilePath(filename));
			this.className = "edit";
			this.code_editor.setText("");
			$.ajax({ method : "GET", url : Workspacer.ajax_url, data : { action : "load", file_path : this.getFilePath(filename)}, dataType : "json"}).done(function(data) {
				_gthis.current_filename = _gthis.potential_filename;
				_gthis.code_editor.setFilename(_gthis.current_filename);
				_gthis.code_editor.setText(data.text);
				var tmp = "Editing " + _gthis.getFilePath(_gthis.current_filename);
				_gthis.set_headerText(tmp);
			}).fail(function(jqXHR,textStatus) {
				var tmp1 = "Failed to load " + _gthis.getFilePath(_gthis.potential_filename);
				_gthis.set_headerText(tmp1);
				window.console.log(textStatus);
			});
		} else {
			this.set_headerText("New file");
			this.className = "new";
			this.code_editor.setFilename(null);
			this.code_editor.setText("");
		}
	}
	,onButtonClick: function(event) {
		var _gthis = this;
		var target = js_Boot.__cast(event.target , HTMLButtonElement);
		var file_path;
		var _g = target.name;
		switch(_g) {
		case "close":
			this.set_open(false);
			break;
		case "create":
			var potential_filename = window.prompt("File name");
			if(potential_filename != null) {
				file_path = Workspacer.filePathFromParts(this.dir_path,potential_filename);
				this.set_headerText("Creating file " + file_path);
				Workspacer.S_serverPost({ action : "create", file_path : file_path, text : this.code_editor.getText()},function(data) {
					if(data.alert_msg == null) {
						_gthis.current_filename = potential_filename;
					}
					_gthis.className = "edit";
					var tmp = "Editing " + Workspacer.filePathFromParts(_gthis.dir_path,_gthis.current_filename);
					_gthis.set_headerText(tmp);
					_gthis.code_editor.setFilename(_gthis.current_filename);
				},function() {
					_gthis.set_headerText(_gthis.current_filename.length > 0 ? _gthis.current_filename : "New file");
				});
			}
			break;
		case "save":
			file_path = Workspacer.filePathFromParts(this.dir_path,this.current_filename);
			this.set_headerText("Saving " + file_path);
			Workspacer.S_serverPost({ action : "save", file_path : file_path, filename : this.current_filename, text : this.code_editor.getText()},function(data1) {
				var tmp1 = "Editing " + Workspacer.filePathFromParts(_gthis.dir_path,_gthis.current_filename);
				_gthis.set_headerText(tmp1);
				_gthis.code_editor.setFilename(_gthis.current_filename);
			});
			break;
		}
	}
	,getView: function() {
		return "<header class=\"top-panel\">\n    <p></p>\n    <button name=\"close\" type=\"button\">Close</button>\n</header>\n<footer class=\"new\"><button type=\"button\" class=\"button new\" name=\"create\">Create File</button></footer>\n<footer class=\"edit\"><button type=\"button\" name=\"create\" class=\"button edit\" style=\"margin-left: 0\"\n>Save as</button><button type=\"button\" class=\"button\" name=\"save\" style=\"float: right\">Save Changes</button></footer>\n<footer class=\"edit-xsl\"><button type=\"button\" class=\"button\" name=\"create\">Save Changes</button></footer>\n<template id=\"editor-container-footer-0\">\n    <button name=\"create\" type=\"button\" class=\"button new\" id=\"create-file\" accesskey=\"s\">Create File</button>\n</template>\n<template id=\"editor-container-footer-1\">\n    <button name=\"create\" type=\"button\" class=\"button edit\" style=\"margin-left: 0\">Save As</button>\n    <button name=\"save\" type=\"button\" class=\"button edit\" accesskey=\"s\" id=\"save-changes\">Save Changes</button>\n</template>\n";
	}
	,__class__: ws_EditorFrame
	,__properties__: $extend(org_tamina_html_component_HTMLComponent.prototype.__properties__,{set_headerText:"set_headerText",set_open:"set_open"})
});
var ws_editorpart_TextAction = function(editor,title) {
	this.editor = editor;
	this.title = title;
};
$hxClasses["ws.editorpart.TextAction"] = ws_editorpart_TextAction;
ws_editorpart_TextAction.__name__ = ["ws","editorpart","TextAction"];
ws_editorpart_TextAction.prototype = {
	getName: function() {
		return Type.getClassName(js_Boot.getClass(this));
	}
	,test: function(class_name) {
		return this.getName() == class_name;
	}
	,undo: function() {
	}
	,redo: function() {
	}
	,__class__: ws_editorpart_TextAction
};
var ws_editorpart_CumulativeDelete = function(editor,title) {
	this.removed_text = "";
	ws_editorpart_TextAction.call(this,editor,title != null ? title : "delete");
};
$hxClasses["ws.editorpart.CumulativeDelete"] = ws_editorpart_CumulativeDelete;
ws_editorpart_CumulativeDelete.__name__ = ["ws","editorpart","CumulativeDelete"];
ws_editorpart_CumulativeDelete.create = function(editor,title) {
	var sel = window.getSelection();
	if(sel.isCollapsed == false) {
		return false;
	}
	var current_range = editor.getCurrentSelectionRange();
	var range_before_selection = window.document.createRange();
	range_before_selection.setStart(editor.edit_area,0);
	range_before_selection.setEnd(current_range.startContainer,current_range.startOffset);
	var text_before_caret = range_before_selection.toString();
	var pos = text_before_caret.length;
	if(pos == 0) {
		return false;
	}
	var instance = null;
	if(!editor.timeout.hasExpired() && editor.undo_stack.get_hasItems()) {
		var last_item = editor.undo_stack.getLastItem();
		if(last_item.getName() == "CumulativeDelete") {
			instance = last_item;
		}
	}
	if(!instance) {
		instance = new ws_editorpart_CumulativeDelete(editor,title);
		editor.undoStackAdd(instance);
	}
	instance.position = pos - 1;
	instance.removed_text = HxOverrides.substr(text_before_caret,-1,null) + Std.string(instance.removed_text);
	window.document.execCommand("delete");
	editor.setEditorRender([{ start : instance.position, end : null}]);
	return true;
};
ws_editorpart_CumulativeDelete.__super__ = ws_editorpart_TextAction;
ws_editorpart_CumulativeDelete.prototype = $extend(ws_editorpart_TextAction.prototype,{
	undo: function() {
		this.editor.replaceText(this.position,0,this.removed_text);
		this.editor.setEditorRender([{ start : this.position + this.removed_text.length, end : null}]);
	}
	,redo: function() {
		this.editor.replaceText(this.position,this.removed_text.length,"");
		this.editor.setEditorRender([{ start : this.position, end : null}]);
	}
	,__class__: ws_editorpart_CumulativeDelete
});
var ws_editorpart_CumulativeForwardDelete = function(editor,title) {
	this.removed_text = "";
	ws_editorpart_TextAction.call(this,editor,title != null ? title : "delete");
};
$hxClasses["ws.editorpart.CumulativeForwardDelete"] = ws_editorpart_CumulativeForwardDelete;
ws_editorpart_CumulativeForwardDelete.__name__ = ["ws","editorpart","CumulativeForwardDelete"];
ws_editorpart_CumulativeForwardDelete.create = function(editor,title) {
	var sel = window.getSelection();
	if(!sel.isCollapsed) {
		return false;
	}
	var current_node = sel.anchorNode;
	var current_range = editor.getCurrentSelectionRange();
	var range_before_selection = window.document.createRange();
	range_before_selection.setStart(editor.edit_area,0);
	range_before_selection.setEnd(current_range.startContainer,current_range.startOffset);
	var text_before_caret = range_before_selection.toString();
	var pos = text_before_caret.length;
	if(pos == editor.edit_area.textContent.length) {
		return false;
	}
	var instance = null;
	if(!editor.timeout.hasExpired() && editor.undo_stack.get_hasItems()) {
		var last_item = editor.undo_stack.getLastItem();
		if(last_item.getName() == "CumulativeForwardDelete") {
			instance = last_item;
		}
	}
	if(!instance) {
		instance = new ws_editorpart_CumulativeForwardDelete(editor,title);
		instance.position = pos;
		editor.undoStackAdd(instance);
	}
	instance.removed_text += HxOverrides.substr(sel.anchorNode.nodeValue,sel.anchorOffset,1);
	window.document.execCommand("forwardDelete");
	editor.setEditorRender([{ start : instance.position, end : null}]);
	return true;
};
ws_editorpart_CumulativeForwardDelete.__super__ = ws_editorpart_TextAction;
ws_editorpart_CumulativeForwardDelete.prototype = $extend(ws_editorpart_TextAction.prototype,{
	undo: function() {
		this.editor.replaceText(this.position,0,this.removed_text);
		this.editor.setEditorRender([{ start : this.position, end : null}]);
	}
	,redo: function() {
		this.editor.replaceText(this.position,this.removed_text.length,"");
		this.editor.setEditorRender([{ start : this.position, end : null}]);
	}
	,__class__: ws_editorpart_CumulativeForwardDelete
});
var ws_editorpart_CumulativeInsert = function(editor,$char,title) {
	ws_editorpart_TextAction.call(this,editor,title != null ? title : "insert");
	this.position = editor.getCharPosFromRangeStart(editor.getCurrentSelectionRange());
	this.new_text = "";
};
$hxClasses["ws.editorpart.CumulativeInsert"] = ws_editorpart_CumulativeInsert;
ws_editorpart_CumulativeInsert.__name__ = ["ws","editorpart","CumulativeInsert"];
ws_editorpart_CumulativeInsert.create = function(editor,$char,title) {
	var instance = null;
	if(!editor.timeout.hasExpired() && editor.undo_stack.get_hasItems()) {
		var last_item = editor.undo_stack.getLastItem();
		if(last_item.getName() == "CumulativeInsert") {
			instance = js_Boot.__cast(last_item , ws_editorpart_CumulativeInsert);
		}
	}
	if(instance == null) {
		instance = new ws_editorpart_CumulativeInsert(editor,$char,title);
		editor.undoStackAdd(instance);
	}
	instance.new_text += $char;
	window.document.execCommand("insertText",false,$char);
	editor.setEditorRender([{ start : instance.position + instance.new_text.length, end : null}]);
	return instance;
};
ws_editorpart_CumulativeInsert.__super__ = ws_editorpart_TextAction;
ws_editorpart_CumulativeInsert.prototype = $extend(ws_editorpart_TextAction.prototype,{
	undo: function() {
		this.editor.replaceText(this.position,this.new_text.length,"");
		this.editor.setEditorRender([{ start : this.position, end : null}]);
	}
	,redo: function() {
		this.editor.replaceText(this.position,0,this.new_text);
		this.editor.setEditorRender([{ start : this.position + this.new_text.length, end : null}]);
	}
	,__class__: ws_editorpart_CumulativeInsert
});
var ws_editorpart_Delete = function(editor,title) {
	this.removed_text = [];
	this.selection = [];
	ws_editorpart_TextAction.call(this,editor,title != null ? title : "delete");
	var sel = window.getSelection();
	var range_count = sel.rangeCount;
	var range = null;
	var range_points;
	var _g1 = 0;
	var _g = range_count;
	while(_g1 < _g) {
		var i = _g1++;
		range = sel.getRangeAt(i);
		range_points = editor.getRangePoints(range);
		this.selection.push(range_points);
		this.removed_text.push({ pos : range_points.start, text : range.toString()});
	}
	this.removed_text.sort(function(item1,item2) {
		return item1.pos - item2.pos;
	});
	sel.deleteFromDocument();
	editor.setEditorRender([editor.getRangePoints(editor.getCurrentSelectionRange())]);
};
$hxClasses["ws.editorpart.Delete"] = ws_editorpart_Delete;
ws_editorpart_Delete.__name__ = ["ws","editorpart","Delete"];
ws_editorpart_Delete.create = function(editor,title) {
	var sel = window.getSelection();
	if(!sel.isCollapsed) {
		editor.undoStackAdd(new ws_editorpart_Delete(editor,title));
	}
};
ws_editorpart_Delete.__super__ = ws_editorpart_TextAction;
ws_editorpart_Delete.prototype = $extend(ws_editorpart_TextAction.prototype,{
	undo: function() {
		var item;
		var _g1 = 0;
		var _g = this.removed_text.length;
		while(_g1 < _g) {
			var i = _g1++;
			item = this.removed_text[i];
			this.editor.replaceText(item.pos,0,item.text);
		}
		this.editor.setEditorRender(this.selection);
	}
	,redo: function() {
		var sel = window.getSelection();
		if(sel.isCollapsed) {
			this.editor.setSelection(this.selection);
		}
		sel.deleteFromDocument();
		this.editor.setEditorRender([this.editor.getRangePoints(sel.getRangeAt(sel.rangeCount - 1))]);
	}
	,__class__: ws_editorpart_Delete
});
var ws_editorpart_Insert = function(editor,new_text,title) {
	ws_editorpart_TextAction.call(this,editor,title != null ? title : "insert");
	this.selection = editor.getSelectionPoints();
	var current_range = editor.getCurrentSelectionRange();
	this.old_text = current_range.toString();
	this.new_text = new_text;
	this.position = this.selection[this.selection.length - 1].start;
	current_range.deleteContents();
	current_range.insertNode(window.document.createTextNode(new_text));
	editor.setEditorRender([{ start : this.position + this.new_text.length, end : null}]);
};
$hxClasses["ws.editorpart.Insert"] = ws_editorpart_Insert;
ws_editorpart_Insert.__name__ = ["ws","editorpart","Insert"];
ws_editorpart_Insert.create = function(editor,new_text,title) {
	editor.undoStackAdd(new ws_editorpart_Insert(editor,new_text,title));
};
ws_editorpart_Insert.__super__ = ws_editorpart_TextAction;
ws_editorpart_Insert.prototype = $extend(ws_editorpart_TextAction.prototype,{
	undo: function() {
		this.editor.replaceText(this.position,this.new_text.length,this.old_text);
		this.editor.setEditorRender(this.selection);
	}
	,redo: function() {
		this.editor.setSelection(this.selection);
		var current_range = this.editor.getCurrentSelectionRange();
		current_range.deleteContents();
		current_range.insertNode(window.document.createTextNode(this.new_text));
		this.editor.setEditorRender([{ start : this.position + this.new_text.length, end : null}]);
	}
	,__class__: ws_editorpart_Insert
});
var ws_editorpart_Stack = function() {
	this.stack = [];
};
$hxClasses["ws.editorpart.Stack"] = ws_editorpart_Stack;
ws_editorpart_Stack.__name__ = ["ws","editorpart","Stack"];
ws_editorpart_Stack.prototype = {
	get_hasItems: function() {
		return this.stack.length > 0;
	}
	,getLength: function() {
		return this.stack.length;
	}
	,push: function(item) {
		this.stack.push(item);
	}
	,pop: function() {
		return this.stack.pop();
	}
	,getItem: function(index) {
		return this.stack[index];
	}
	,getItems: function() {
		return this.stack;
	}
	,getLastItem: function() {
		return this.stack[this.stack.length - 1];
	}
	,clear: function() {
		this.stack = [];
	}
	,__class__: ws_editorpart_Stack
	,__properties__: {get_hasItems:"get_hasItems"}
};
var ws_editorpart_Timeout = function() {
	this.last_date_now = 0;
};
$hxClasses["ws.editorpart.Timeout"] = ws_editorpart_Timeout;
ws_editorpart_Timeout.__name__ = ["ws","editorpart","Timeout"];
ws_editorpart_Timeout.prototype = {
	start: function() {
		this.last_date_now = new Date().getTime();
	}
	,clear: function() {
		this.last_date_now = 0;
	}
	,hasExpired: function() {
		return new Date().getTime() > this.last_date_now + ws_editorpart_Timeout.period;
	}
	,__class__: ws_editorpart_Timeout
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
$hxClasses["Math"] = Math;
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = ["String"];
$hxClasses["Array"] = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses["Int"] = { __name__ : ["Int"]};
var Dynamic = $hxClasses["Dynamic"] = { __name__ : ["Dynamic"]};
var Float = $hxClasses["Float"] = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses["Class"] = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {};
Workspacer.ajax_url = Symphony.Context.get("symphony") + "/extension/workspacer/ajax/manage/";
haxe_Template.splitter = new EReg("(::[A-Za-z0-9_ ()&|!+=/><*.\"-]+::|\\$\\$([A-Za-z0-9_-]+)\\()","");
haxe_Template.expr_splitter = new EReg("(\\(|\\)|[ \r\n\t]*\"[^\"]*\"[ \r\n\t]*|[!+=/><*.&|-]+)","");
haxe_Template.expr_trim = new EReg("^[ ]*([^ ]+)[ ]*$","");
haxe_Template.expr_int = new EReg("^[0-9]+$","");
haxe_Template.expr_float = new EReg("^([+-]?)(?=\\d|,\\d)\\d*(,\\d*)?([Ee]([+-]?\\d+))?$","");
haxe_Template.globals = { };
js_Boot.__toStr = ({ }).toString;
ws_CodeEditor.__meta__ = { obj : { view : ["ws/CodeEditor.html"]}};
ws_CodeEditor.__registered = (function($this) {
	var $r;
	{
		var this1 = org_tamina_html_component_HTMLApplication.get_componentsXTagList();
		var key = "ws-codeeditor".toLowerCase();
		var _this = this1;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,"ws.CodeEditor");
		} else {
			_this.h[key] = "ws.CodeEditor";
		}
	}
	$r = true;
	return $r;
}(this));
ws_ContextMenu.__meta__ = { obj : { view : ["ws/ContextMenu.html"]}};
ws_ContextMenu.KEY = { UP_ARROW : 38, DOWN_ARROW : 40};
ws_ContextMenu.__registered = (function($this) {
	var $r;
	{
		var this1 = org_tamina_html_component_HTMLApplication.get_componentsXTagList();
		var key = "ws-contextmenu".toLowerCase();
		var _this = this1;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,"ws.ContextMenu");
		} else {
			_this.h[key] = "ws.ContextMenu";
		}
	}
	$r = true;
	return $r;
}(this));
ws_Def.EOL = "\n";
ws_Def.TAB = "    ";
ws_DirectoryBox.__meta__ = { obj : { view : ["ws/DirectoryBox.html"]}, fields : { _directory_list : { skinpart : [""]}, _file_list : { skinpart : [""]}}};
ws_DirectoryBox.__registered = (function($this) {
	var $r;
	{
		var this1 = org_tamina_html_component_HTMLApplication.get_componentsXTagList();
		var key = "ws-directorybox".toLowerCase();
		var _this = this1;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,"ws.DirectoryBox");
		} else {
			_this.h[key] = "ws.DirectoryBox";
		}
	}
	$r = true;
	return $r;
}(this));
ws_EditorFrame.__meta__ = { obj : { view : ["ws/EditorFrame.html"]}};
ws_EditorFrame.__registered = (function($this) {
	var $r;
	{
		var this1 = org_tamina_html_component_HTMLApplication.get_componentsXTagList();
		var key = "ws-editorframe".toLowerCase();
		var _this = this1;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,"ws.EditorFrame");
		} else {
			_this.h[key] = "ws.EditorFrame";
		}
	}
	$r = true;
	return $r;
}(this));
ws_editorpart_Timeout.period = 30000;
Workspacer.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
